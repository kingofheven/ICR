[{"question": "decode a hex string '4a4b4c' to UTF-8.\n", "answers": ["bytes . fromhex ( '4a4b4c' ) . decode ( 'utf-8' ) \n"], "generated": "print ( '4a4b4c'. decode ( 'utf8' ) )"}, {"question": "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`\n", "answers": ["print ( '%*s : %*s' % ( 20 , 'Python' , 20 , 'Very Good' ) ) \n"], "generated": "\"\"\"Python: Very Good\"\"\". format ( '20' )"}, {"question": "get rid of None values in dictionary `kwargs`\n", "answers": ["res = { k : v for k , v in list ( kwargs . items ( ) ) if v is not None } \n"], "generated": "{ k : v for k, v in list ( kwargs. items ( ) ) if v is not None }"}, {"question": "capture final output of a chain of system commands `ps -ef | grep something | wc -l`\n", "answers": ["subprocess . check_output ( 'ps -ef | grep something | wc -l' , shell = True ) \n"], "generated": "output = subprocess. check_output ( [ 'ps', '-ef', '|', 'grep','something', '|', 'wc', '-l' ], shell = True )"}, {"question": "find intersection data between series `s1` and series `s2`\n", "answers": ["pd . Series ( list ( set ( s1 ) . intersection ( set ( s2 ) ) ) ) \n"], "generated": "s1. intersection ( s2 )"}, {"question": "Format a datetime string `when` to extract date only\n", "answers": ["then = datetime . datetime . strptime ( when , '%Y-%m-%d' ) . date ( ) \n"], "generated": "datetime. datetime. strptime ( when, '%m/%d/%Y' ). date ( ). isoformat ( )"}, {"question": "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`\n", "answers": ["' a \\n b \\r\\n c ' . split ( '\\n' ) \n"], "generated": "[ a. split ( '\\n' ) [ 0 ] for a in a. split ( '\\n' ) for b in a. split ( '\\r\\n' ) for c in a. split ( '\\n' ) ]"}, {"question": "get the first object from a queryset in django model `Entry`\n", "answers": ["Entry . objects . filter ( ) [ : 1 ] . get ( ) \n"], "generated": "Entry. objects. first ( )"}, {"question": "enable warnings using action 'always'\n", "answers": ["warnings . simplefilter ( 'always' ) \n"], "generated": "warnings. setLevel ( logging. WARNING )"}, {"question": "run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable\n", "answers": ["subprocess . call ( [ 'python.exe' , 'hello.py' , 'htmlfilename.htm' ] ) \n"], "generated": "os. system ( 'python hello.py htmlfilename.htm' )"}, {"question": "convert a string `my_string` with dot and comma into a float number `my_float`\n", "answers": ["my_float = float ( my_string . replace ( ',' , '' ) ) \n"], "generated": "print ('my_float = %.2f' % ( float ( my_string ) ) )"}, {"question": "set pythonpath in python script.\n", "answers": ["sys . path . append ( '/path/to/whatever' ) \n"], "generated": "os. path. set ( 'C:\\\\Python27\\\\Lib\\\\site-packages', 'C:\\\\Python27\\\\Lib\\\\site-packages' )"}, {"question": "open a file `Output.txt` in append mode\n", "answers": ["file = open ( 'Output.txt' , 'a' ) \n"], "generated": "open ( 'Output.txt', 'a+' ). write ( '1' )"}, {"question": "download a file `url` over HTTP and save to `file_name`\n", "answers": ["u = urllib . request . urlopen ( url ) f = open ( file_name , 'wb' ) meta = u . info ( ) file_size = int ( meta . getheaders ( 'Content-Length' ) [ 0 ] ) print ( ( 'Downloading: %s Bytes: %s' % ( file_name , file_size ) ) ) file_size_dl = 0 block_sz = 8192 while True : buffer = u . read ( block_sz ) if ( not buffer ) : break file_size_dl += len ( buffer ) f . write ( buffer ) status = ( '%10d  [%3.2f%%]' % ( file_size_dl , ( ( file_size_dl * 100.0 ) / file_size ) ) ) status = ( status + ( chr ( 8 ) * ( len ( status ) + 1 ) ) ) print ( status , end = ' ' ) f . close ( ) \n"], "generated": "urllib. request. urlretrieve ( 'http://www.google.com/search?q=%s' % url, 'file_name' )"}, {"question": "download a file `url` over HTTP\n", "answers": ["r = requests . get ( url ) \n"], "generated": "urllib. request. urlretrieve ( 'http://www.google.com/', 'file.txt' )"}, {"question": "argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`\n", "answers": ["parser . add_argument ( '--version' , action = 'version' , version = '%(prog)s 2.0' ) \n"], "generated": "parser. add_argument ( '--version', action ='version', version = '%(prog)s 2.0' )"}, {"question": "Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively\n", "answers": ["pd . merge ( split_df , csv_df , on = [ 'key' ] , suffixes = ( '_left' , '_right' ) ) \n"], "generated": "df. merge ( split_df, on = 'key', suffix = '_left' ). merge ( csv_df, on = 'key', suffix = '_right' )"}, {"question": "read keyboard-input\n", "answers": ["input ( 'Enter your input:' ) \n"], "generated": "input ( )"}, {"question": "python save list `mylist` to file object 'save.txt'\n", "answers": ["pickle . dump ( mylist , open ( 'save.txt' , 'wb' ) ) \n"], "generated": "save. write ( mylist )"}, {"question": "Create 3d array of zeroes of size `(3,3,3)`\n", "answers": ["numpy . zeros ( ( 3 , 3 , 3 ) ) \n"], "generated": "np. zeros ( ( 3, 3, 3 ) )"}, {"question": "convert scalar `x` to array\n", "answers": ["x = np . asarray ( x ) . reshape ( 1 , - 1 ) [ ( 0 ) , : ] \n"], "generated": "np. array ( x, dtype = float )"}, {"question": "convert hex string '470FC614' to a float number\n", "answers": ["struct . unpack ( '!f' , '470FC614' . decode ( 'hex' ) ) [ 0 ] \n"], "generated": "float ( '470FC614', 16 )"}, {"question": "running bash script 'sleep.sh'\n", "answers": ["subprocess . call ( 'sleep.sh' , shell = True ) \n"], "generated": "os. system ('sleep.sh' )"}, {"question": "make a comma-separated string from a list `myList`\n", "answers": ["myList = ',' . join ( map ( str , myList ) ) \n"], "generated": "[ ','. join ( x ) for x in myList ]"}, {"question": "remove substring 'bag,' from a string 'lamp, bag, mirror'\n", "answers": ["print ( 'lamp, bag, mirror' . replace ( 'bag,' , '' ) ) \n"], "generated": "re. sub ( '\\\\b(lamp|bag|mirror)', '', 'lamp, bag, mirror' )"}, {"question": "convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'\n", "answers": ["datetime . datetime . fromtimestamp ( s ) . strftime ( '%Y-%m-%d %H:%M:%S.%f' ) \n"], "generated": "time. mktime ( s ). strftime ( '%Y-%m-%d %H:%M:%S.%f' )"}, {"question": "get the date 7 days before the current date\n", "answers": ["( datetime . datetime . now ( ) - datetime . timedelta ( days = 7 ) ) . date ( ) \n"], "generated": "( date ( 2010, 7, 1 ) - datetime. timedelta ( days = 7 ) )"}, {"question": "sum columns of a list `array`\n", "answers": ["[ sum ( row [ i ] for row in array ) for i in range ( len ( array [ 0 ] ) ) ] \n"], "generated": "sum ( [ sum ( x ) for x in array ] )"}, {"question": "combine list of dictionaries `dicts` with the same keys in each list to a single dictionary\n", "answers": ["dict ( ( k , [ d [ k ] for d in dicts ] ) for k in dicts [ 0 ] ) \n"], "generated": "dict ( ( k, v ) for d in dicts for k, v in list ( d. items ( ) ) if k in dicts )"}, {"question": "How do I get the url parameter in a Flask view\n", "answers": ["request . args [ 'myParam' ] \n"], "generated": "url = request. url"}, {"question": "Insert directory 'apps' into directory `__file__`\n", "answers": ["sys . path . insert ( 1 , os . path . join ( os . path . dirname ( __file__ ) , 'apps' ) ) \n"], "generated": "os. path. insert ( 0, 'apps' )"}, {"question": "Insert a 'None' value into a SQLite3 table.\n", "answers": ["db . execute ( \"INSERT INTO present VALUES('test2', ?, 10)\" , ( None , ) ) \n"], "generated": "cursor. execute ( 'INSERT INTO table VALUES (NULL)' )"}, {"question": "append elements of a set `b` to a list `a`\n", "answers": ["a . extend ( b ) \n"], "generated": "a. update ( b )"}, {"question": "write the data of dataframe `df` into text file `np.txt`\n", "answers": ["np . savetxt ( 'c:\\\\data\\\\np.txt' , df . values , fmt = '%d' ) \n"], "generated": "np. write_csv ( 'np.txt', df. values )"}, {"question": "Split a string `x` by last occurrence of character `-`\n", "answers": ["print ( x . rpartition ( '-' ) [ 0 ] ) \n"], "generated": "x. split ( '-', 1 ) [ - 1 ]"}, {"question": "upload file using FTP\n", "answers": ["ftp . storlines ( 'STOR ' + filename , open ( filename , 'r' ) ) \n"], "generated": "ftp. upload ( 'file.txt', 'file.txt' )"}, {"question": "create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`\n", "answers": ["np . maximum ( [ 2 , 3 , 4 ] , [ 1 , 5 , 2 ] ) \n"], "generated": "np. max ( [ [ 2, 3, 4 ], [ 1, 5, 2 ] ] )"}, {"question": "loop over files in directory '.'\n", "answers": ["for fn in os . listdir ( '.' ) : if os . path . isfile ( fn ) : pass \n"], "generated": "for ( dirname, dirnames, filenames ) in os. walk ( '.' ) : for subdirname in dirnames : print ( os. path. join ( dirname, subdirname ) ) for filename in filenames : pass"}, {"question": "create a random list of integers\n", "answers": ["[ int ( 1000 * random . random ( ) ) for i in range ( 10000 ) ] \n"], "generated": "random. sample ( range ( 10 ), 10 )"}, {"question": "Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`\n", "answers": ["db . GqlQuery ( 'SELECT * FROM Schedule WHERE station = $1' , foo . key ( ) ) \n"], "generated": "result = app. schedule. query ( 'SELECT * FROM Schedule WHERE station = $1', foo. key ( ) )"}, {"question": "print a 2 dimensional list `tab` as a table with delimiters\n", "answers": ["print ( '\\n' . join ( '\\t' . join ( str ( col ) for col in row ) for row in tab ) ) \n"], "generated": "print ( '\\n'. join (' '. join ( map ( str, row ) ) for row in tab ) )"}, {"question": "format the variables `self.goals` and `self.penalties` using string formatting\n", "answers": ["\"\"\"({:d} goals, ${:d})\"\"\" . format ( self . goals , self . penalties ) \n"], "generated": "self. goals = '%(goals)s' % { 'goals' : self. goals }"}, {"question": "format string \"({0.goals} goals, ${0.penalties})\"\n", "answers": ["\"\"\"({0.goals} goals, ${0.penalties})\"\"\" . format ( self ) \n"], "generated": "\"\"\"{0.goals} goals, {0.penalties}\"\"\". format ( goals = '10', penalties = '20' )"}, {"question": "combine elements of each list in list `L` into digits of a single integer\n", "answers": ["[ '' . join ( str ( d ) for d in x ) for x in L ] \n"], "generated": "[ ( x, y ) for x, y in list ( L ) for x in xrange ( 10 ) ]"}, {"question": "write the elements of list `lines` concatenated by special character '\\n' to file `myfile`\n", "answers": ["myfile . write ( '\\n' . join ( lines ) ) \n"], "generated": "with open ('myfile', 'w' ) as f : f. write ( '\\n'. join ( lines ) )"}, {"question": "Remove duplicate words from a string `text` using regex\n", "answers": ["text = re . sub ( '\\\\b(\\\\w+)( \\\\1\\\\b)+' , '\\\\1' , text ) \n"], "generated": "re. sub ( '\\\\w+\\\\w+', '', text )"}, {"question": "search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'\n", "answers": ["re . search ( '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' , 'C:\\\\SomeDir\\\\AcroTray.exe' ) \n"], "generated": "re. search ( '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe', 'C:\\\\SomeDir\\\\AcroTray.exe' )"}, {"question": "search for occurrences of regex pattern '>.*<' in xml string `line`\n", "answers": ["print ( re . search ( '>.*<' , line ) . group ( 0 ) ) \n"], "generated": "print ( re. search ( '>.*<', line ). group ( 1 ) )"}, {"question": "convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'\n", "answers": ["datetime . datetime . strptime ( string_date , '%Y-%m-%d %H:%M:%S.%f' ) \n"], "generated": "datetime. datetime. strptime ( '03:55', '%Y-%m-%d %H:%M:%S.%f' )"}, {"question": "lower a string `text` and remove non-alphanumeric characters aside from space\n", "answers": ["re . sub ( '[^\\\\sa-zA-Z0-9]' , '' , text ) . lower ( ) . strip ( ) \n"], "generated": "re. sub ( '\\\\b[^a-zA-Z0-9]\\\\b', '', text )"}, {"question": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.\n", "answers": ["plt . plot ( x , y , label = 'H\\u2082O' ) \n"], "generated": "ax. set_xticks ( [ 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20'"}, {"question": "loop over a list `mylist` if sublists length equals 3\n", "answers": ["[ x for x in mylist if len ( x ) == 3 ] \n"], "generated": "for i in mylist : pass"}, {"question": "create list `lst` containing 100 instances of object `Object`\n", "answers": ["lst = [ Object ( ) for i in range ( 100 ) ] \n"], "generated": "lst = [ Object ( ) for i in range ( 100 ) ]"}, {"question": "joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes\n", "answers": ["df1 . merge ( df2 , on = 'Date_Time' ) \n"], "generated": "df1. join ( df2, on = 'Date_Time' )"}, {"question": "Split a string by a delimiter in python\n", "answers": ["[ x . strip ( ) for x in '2.MATCHES $$TEXT$$ STRING' . split ( '$$TEXT$$' ) ] \n"], "generated": "re. split ( '\\\\s+', s )"}, {"question": "check if a directory `path` exists and create it if necessary\n", "answers": ["try : os . makedirs ( path ) except OSError : if ( not os . path . isdir ( path ) ) : raise \n"], "generated": "if ( not os. path. exists ( path ) ) :"}, {"question": "check if a directory `path` exists and create it if necessary\n", "answers": ["try : os . makedirs ( path ) except OSError as exception : if ( exception . errno != errno . EEXIST ) : raise \n"], "generated": "if ( not os. path. exists ( path ) ) :"}, {"question": "substitute ASCII letters in string 'aas30dsa20' with empty string ''\n", "answers": ["re . sub ( '\\\\D' , '' , 'aas30dsa20' ) \n"], "generated": "re. sub ( '\\\\w+', '', 'aas30dsa20' )"}, {"question": "access a tag called \"name\" in beautifulsoup `soup`\n", "answers": ["print ( soup . find ( 'name' ) . string ) \n"], "generated": "soup. find ( 'name', text = 'Elsie' )"}, {"question": "Create new matrix object  by concatenating data from matrix A and matrix B\n", "answers": ["np . concatenate ( ( A , B ) ) \n"], "generated": "A. concatenate ( B )"}, {"question": "Get the characters count in a file `filepath`\n", "answers": ["os . stat ( filepath ) . st_size \n"], "generated": "with open ( filepath, 'r' ) as f : print ( len ( f. readline ( ) ) )"}, {"question": "count the occurrences of items in list `l`\n", "answers": ["Counter ( l ) \n"], "generated": "sum ( 1 for i in l )"}, {"question": "count the occurrences of items in list `l`\n", "answers": ["dict ( ( ( x , l . count ( x ) ) for x in set ( l ) ) ) \n"], "generated": "sum ( 1 for i in l )"}, {"question": "copy file `srcfile` to directory `dstdir`\n", "answers": ["shutil . copy ( srcfile , dstdir ) \n"], "generated": "os. makedirs ( dstdir )"}, {"question": "get the largest key whose not associated with value of 0 in dictionary `x`\n", "answers": ["( k for k , v in x . items ( ) if v != 0 ) \n"], "generated": "max ( list ( x. items ( ) ), key = lambda x : x [ 1 ] [ 1 ] )"}, {"question": "Put the curser at beginning of the file\n", "answers": ["file . seek ( 0 ) \n"], "generated": "fh1. seek ( 0 )"}, {"question": "remove key 'ele' from dictionary `d`\n", "answers": ["del d [ 'ele' ] \n"], "generated": "d. remove ( 'ele', None )"}, {"question": "merge list `['it']` and list `['was']` and list `['annoying']` into one list\n", "answers": ["[ 'it' ] + [ 'was' ] + [ 'annoying' ] \n"], "generated": "list ( [ 'it', 'was', 'annoying' ] )"}, {"question": "check if a pandas dataframe `df`'s index is sorted\n", "answers": ["all ( df . index [ : - 1 ] <= df . index [ 1 : ] ) \n"], "generated": "df. sort_index ( inplace = True )"}, {"question": "Convert list `t` to tuple\n", "answers": ["tuple ( l ) \n"], "generated": "t = tuple ( x [ 0 ] for x in t )"}, {"question": "send the output of pprint object `dataobject` to file `logFile`\n", "answers": ["pprint . pprint ( dataobject , logFile ) \n"], "generated": "dataobject. write ( open ( 'logFile', 'a' ). write ( 'Hello World' ) )"}, {"question": "Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True\n", "answers": ["df . iloc [ np . flatnonzero ( df [ 'BoolCol' ] ) ] \n"], "generated": "df. loc [ df [ 'BoolCol' ] == True ]"}, {"question": "get index of rows in dataframe `df` which column 'BoolCol' matches value True\n", "answers": ["df [ df [ 'BoolCol' ] ] . index . tolist ( ) \n"], "generated": "df. loc [ df [ 'BoolCol' ]. isin ( [ True, False ] ) ]"}, {"question": "insert data from a string `testfield` to sqlite db `c`\n", "answers": ["c . execute ( \"INSERT INTO test VALUES (?, 'bar')\" , ( testfield , ) ) \n"], "generated": "c. execute ( 'INSERT INTO table VALUES ( %s, %s, %s)', testfield )"}, {"question": "convert a raw string `raw_string` into a normal string\n", "answers": ["raw_string . decode ( 'string_escape' ) \n"], "generated": "raw_string. decode ('string_escape' )"}, {"question": "split a string `s` with into all strings of repeated characters\n", "answers": ["[ m . group ( 0 ) for m in re . finditer ( '(\\\\d)\\\\1*' , s ) ] \n"], "generated": "[ s. split ( ) for s in re. findall ( '\\\\w+', s ) ]"}, {"question": "do a scatter plot with empty circles\n", "answers": ["plt . plot ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , 'o' , mfc = 'none' ) \n"], "generated": "plt. scatter ( [ ] )"}, {"question": "filter rows containing key word `ball` in column `ids`\n", "answers": ["df [ df [ 'ids' ] . str . contains ( 'ball' ) ] \n"], "generated": "ids. filter ( word ( 'ball' ) )"}, {"question": "Add indexes in a data frame `df` to a column `index1`\n", "answers": ["df [ 'index1' ] = df . index \n"], "generated": "df. set_index ( [ 'index1' ], append = True )"}, {"question": "Get reverse of list items from list 'b' using extended slicing\n", "answers": ["[ x [ : : - 1 ] for x in b ] \n"], "generated": "[ ( x, y ) for x, y in zip ( b, b [ 1 : ] ) ]"}, {"question": "zip two 2-d arrays `a` and `b`\n", "answers": ["np . array ( zip ( a . ravel ( ) , b . ravel ( ) ) , dtype = 'i4,i4' ) . reshape ( a . shape ) \n"], "generated": "np. zip ( a, b )"}, {"question": "Send a post request with raw data `DATA` and basic authentication with `username` and `password`\n", "answers": ["requests . post ( url , data = DATA , headers = HEADERS_DICT , auth = ( username , password ) ) \n"], "generated": "requests. post ( 'http://httpbin.org/post', data = DATA, auth = ( 'username', 'pwd' ) )"}, {"question": "Iterate ove list `[1, 2, 3]` using list comprehension\n", "answers": ["print ( [ item for item in [ 1 , 2 , 3 ] ] ) \n"], "generated": "[ ( 1, 2 ), ( 3, 4 ) ]"}, {"question": "get the filename without the extension from file 'hemanth.txt'\n", "answers": ["print ( os . path . splitext ( os . path . basename ( 'hemanth.txt' ) ) [ 0 ] ) \n"], "generated": "fn = os. path. join ( os. path. dirname ( __file__ ), 'hemanth.txt' )"}, {"question": "create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`\n", "answers": ["values = sum ( [ [ 'A' , 'B' , 'C' ] , [ 'D' , 'E' , 'F' ] , [ 'G' , 'H' , 'I' ] ] , [ ] ) \n"], "generated": "[ [ 'A', 'B', 'C' ], [ 'D', 'E', 'F' ], [ 'G', 'H', 'I' ] ]"}, {"question": "replace all occurences of newlines `\\n` with `<br>` in dataframe `df`\n", "answers": ["df . replace ( { '\\n' : '<br>' } , regex = True ) \n"], "generated": "df. fillna ( method = 'ffill', inplace = True )"}, {"question": "create a list containing each two adjacent letters in string `word` as its elements\n", "answers": ["[ ( x + y ) for x , y in zip ( word , word [ 1 : ] ) ] \n"], "generated": "[ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z' ]"}, {"question": "extract a url from a string `myString`\n", "answers": ["print ( re . findall ( '(https?://[^\\\\s]+)' , myString ) ) \n"], "generated": "myString = 'http://www.google.com/'. replace ( 'http://www.google.com/', '' )"}, {"question": "remove all special characters, punctuation and spaces from a string `mystring` using regex\n", "answers": ["re . sub ( '[^A-Za-z0-9]+' , '' , mystring ) \n"], "generated": "re. sub ( '\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+\\\\s+\\\\S+"}, {"question": "Create multidimensional array `matrix` with 3 rows and 2 columns in python\n", "answers": ["matrix = [ [ a , b ] , [ c , d ] , [ e , f ] ] \n"], "generated": "matrix = numpy. array ( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] )"}, {"question": "get an absolute file path of file 'mydir/myfile.txt'\n", "answers": ["os . path . abspath ( 'mydir/myfile.txt' ) \n"], "generated": "os. path. abspath ( mydir +'myfile.txt' )"}, {"question": "get filename without extension from file `filename`\n", "answers": ["os . path . splitext ( filename ) [ 0 ] \n"], "generated": "fn = os. path. basename ( filename )"}, {"question": "split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result\n", "answers": ["\"\"\"Docs/src/Scripts/temp\"\"\" . replace ( '/' , '/\\x00/' ) . split ( '\\x00' ) \n"], "generated": "result = re. split ( '/', str1 )"}, {"question": "copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'\n", "answers": ["df [ 'D' ] = df [ 'B' ] \n"], "generated": "df [ 'B' ]. fillna ( df [ 'D' ] )"}, {"question": "check characters of string `string` are true predication of function `predicate`\n", "answers": ["all ( predicate ( x ) for x in string ) \n"], "generated": "'a' in string. all ( predicate ( string ) )"}, {"question": "how to get a single result from a SQLite query in python?\n", "answers": ["cursor . fetchone ( ) [ 0 ] \n"], "generated": "sql = 'SELECT * FROM table'"}, {"question": "Get a list of integers by splitting  a string `user` with comma\n", "answers": ["[ int ( s ) for s in user . split ( ',' ) ] \n"], "generated": "[ int ( x ) for x in user. split ( ',' ) ]"}, {"question": "sort a list of objects `ut`, based on a function `cmpfun` in descending order\n", "answers": ["ut . sort ( key = cmpfun , reverse = True ) \n"], "generated": "ut. sort ( cmpfun = lambda x, y : cmp ( x, y ) )"}, {"question": "sort a list of objects `ut` in reverse order by their `count` property\n", "answers": ["ut . sort ( key = lambda x : x . count , reverse = True ) \n"], "generated": "ut. sort ( key = lambda x : x. count )"}, {"question": "click a href button having text `Send InMail` with selenium\n", "answers": ["driver . findElement ( By . linkText ( 'Send InMail' ) ) . click ( ) \n"], "generated": "driver. find_element_by_xpath ( 'xpath' ). click ( )"}, {"question": "cast an int `i` to a string and concat to string 'ME'\n", "answers": ["'ME' + str ( i ) \n"], "generated": "str ( int ( i ) ) + 'ME'"}, {"question": "prepend the line '#test firstline\\n' to the contents of file 'infile' and save as the file 'outfile'\n", "answers": ["open ( 'outfile' , 'w' ) . write ( '#test firstline\\n' + open ( 'infile' ) . read ( ) ) \n"], "generated": "with open ( 'infile', 'r' ) as infile : infile. read ( ). replace ( '#test firstline\\n', '' ). write ( 'outfile' )"}, {"question": "split string `s` by words that ends with 'd'\n", "answers": ["re . findall ( '\\\\b(\\\\w+)d\\\\b' , s ) \n"], "generated": "[ re. split ( '\\\\w+', s ) for s in re. findall ( '\\\\w+', s ) ]"}, {"question": "Removing duplicates in list `t`\n", "answers": ["list ( set ( t ) ) \n"], "generated": "[ dict ( t ) for t in set ( [ tuple ( d. items ( ) ) for d in t ] ) ]"}, {"question": "Removing duplicates in list `abracadabra`\n", "answers": ["list ( OrderedDict . fromkeys ( 'abracadabra' ) ) \n"], "generated": "[ list ( x ) for x in abracadabra ]"}, {"question": "Convert the first row of numpy matrix `a` to a list\n", "answers": ["numpy . array ( a ) [ 0 ] . tolist ( ) \n"], "generated": "a [ 0 ]"}, {"question": "convert elements of each tuple in list `l` into a string  separated by character `@`\n", "answers": ["\"\"\" \"\"\" . join ( [ ( '%d@%d' % t ) for t in l ] ) \n"], "generated": "[ '@'. join ( x ) for x in l ]"}, {"question": "get the html from the current web page of a Selenium driver\n", "answers": ["driver . execute_script ( 'return document.documentElement.outerHTML;' ) \n"], "generated": "driver. get ( 'http://www.google.com' )"}, {"question": "select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`\n", "answers": ["df [ 'A' ] [ ( df [ 'B' ] > 50 ) & ( df [ 'C' ] == 900 ) ] \n"], "generated": "df. loc [ df [ 'A' ] > 50 | df [ 'B' ] == 900 ]"}, {"question": "get sorted list of keys of dict `d`\n", "answers": ["sorted ( d ) \n"], "generated": "sorted ( list ( d. keys ( ) ) )"}, {"question": "convert string \"1\" into integer\n", "answers": ["int ( '1' ) \n"], "generated": "int ( '1', 16 )"}, {"question": "convert items in `T1` to integers\n", "answers": ["T2 = [ map ( int , x ) for x in T1 ] \n"], "generated": "[ int ( x ) for x in T1 ]"}, {"question": "call a shell script `notepad` using subprocess\n", "answers": ["subprocess . call ( [ 'notepad' ] ) \n"], "generated": "subprocess. call ( [ 'notepad' ], shell = True )"}, {"question": "encode string 'data to be encoded'\n", "answers": ["encoded = base64 . b64encode ( 'data to be encoded' ) \n"], "generated": "data. encode ( 'utf8' )"}, {"question": "parse tab-delimited CSV file 'text.txt' into a list\n", "answers": ["lol = list ( csv . reader ( open ( 'text.txt' , 'rb' ) , delimiter = '\\t' ) ) \n"], "generated": "with open ( 'text.txt', 'r' ) as f : list = [ ] for line in f : list. append ( line )"}, {"question": "group a list of dicts `LD` into one dict by key\n", "answers": ["print ( dict ( zip ( LD [ 0 ] , zip ( * [ list ( d . values ( ) ) for d in LD ] ) ) ) ) \n"], "generated": "{ k : v for d in LD for k, v in list ( d. items ( ) ) }"}, {"question": "convert unicode string u\"{'code1':1,'code2':1}\" into dictionary\n", "answers": ["d = ast . literal_eval ( \"{'code1':1,'code2':1}\" ) \n"], "generated": "dict ( { 'code1' : 1, 'code2' : 1 } )"}, {"question": "remove any url within string `text`\n", "answers": ["text = re . sub ( '^https?:\\\\/\\\\/.*[\\\\r\\\\n]*' , '' , text , flags = re . MULTILINE ) \n"], "generated": "text = re. sub ( '\\\\(.*?\\\\)', '', text )"}, {"question": "calculate mean across dimension in a 2d array `a`\n", "answers": ["np . mean ( a , axis = 1 ) \n"], "generated": "np. mean ( a, axis = 0 )"}, {"question": "run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'\n", "answers": ["subprocess . call ( '/usr/bin/Rscript --vanilla /pathto/MyrScript.r' , shell = True ) \n"], "generated": "os. system ( '/usr/bin/Rscript --vanilla /pathto/MyrScript.r' )"}, {"question": "replacing nan in the dataframe `df` with row average\n", "answers": ["df . fillna ( df . mean ( axis = 1 ) , axis = 1 ) \n"], "generated": "df. fillna ( method = 'ffill', inplace = True )"}, {"question": "Call a base class's class method `do` from derived class `Derived`\n", "answers": ["super ( Derived , cls ) . do ( a ) \n"], "generated": "super ( Derived, self ). do ( )"}, {"question": "separate words delimited by one or more spaces into a list\n", "answers": ["re . split ( ' +' , 'hello world sample text' ) \n"], "generated": "re. split ( '\\\\s+', s )"}, {"question": "get the value associated with unicode key 'from_user' of first dictionary in list `result`\n", "answers": ["result [ 0 ] [ 'from_user' ] \n"], "generated": "result [ 0 ][ 'from_user' ]"}, {"question": "swap keys with values in a dictionary `a`\n", "answers": ["res = dict ( ( v , k ) for k , v in a . items ( ) ) \n"], "generated": "dict ( ( k, v ) for k, v in a. items ( ) )"}, {"question": "How to count distinct values in a column of a pandas group by object?\n", "answers": ["df . groupby ( [ 'col1' , 'col2' ] ) [ 'col3' ] . nunique ( ) . reset_index ( ) \n"], "generated": "df. groupby ( 'A' ). count ( )"}, {"question": "create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'\n", "answers": ["[ value for key , value in list ( dict1 . items ( ) ) if key . startswith ( 'EMP$$' ) ] \n"], "generated": "[ value for key, value in list ( dict1. items ( ) ) if key. startswith ( 'EMP$$' ) ]"}, {"question": "print elements of list `list` seperated by tabs `\\t`\n", "answers": ["print ( '\\t' . join ( map ( str , list ) ) ) \n"], "generated": "print ( '\\n'. join ('   '. join ( map ( str, row ) ) for row in list ) )"}, {"question": "Encode a latin character in string `Sopet\\xc3\\xb3n` properly\n", "answers": ["'Sopet\\xc3\\xb3n' . encode ( 'latin-1' ) . decode ( 'utf-8' ) \n"], "generated": "Sopet\\xc3\\xb3n. encode ( 'utf-8' )"}, {"question": "regex, find \"n\"s only in the middle of string `s`\n", "answers": ["re . findall ( 'n(?<=[^n]n)n+(?=[^n])(?i)' , s ) \n"], "generated": "re. sub ( '\\\\b(\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+"}, {"question": "sort a list of dictionary `mylist` by the key `title`\n", "answers": ["mylist . sort ( key = lambda x : x [ 'title' ] ) \n"], "generated": "mylist. sort ( key = lambda x : x [ 1 ] [ 'title' ] )"}, {"question": "sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.\n", "answers": ["l . sort ( key = lambda x : ( x [ 'title' ] , x [ 'title_url' ] , x [ 'id' ] ) ) \n"], "generated": "mylist. sort ( key = lambda d : d [ 'title' ] [ 'title_url' ] [ 'id' ], ascending = True )"}, {"question": "BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'\n", "answers": ["soup . find_all ( 'span' , { 'class' : 'starGryB sp' } ) \n"], "generated": "soup. findAll ('span', class_ = re. compile ('starGryB sp' ) )"}, {"question": "Extract brackets from string `s`\n", "answers": ["brackets = re . sub ( '[^(){}[\\\\]]' , '' , s ) \n"], "generated": "re. sub ( '\\\\[(.*?)\\\\]', '\\\\1', s )"}, {"question": "read a file `file` without newlines\n", "answers": ["[ line . rstrip ( '\\n' ) for line in file ] \n"], "generated": "with open ( 'file', 'r' ) as f : f. read ( )"}, {"question": "get the position of item 1 in `testlist`\n", "answers": ["[ i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ] \n"], "generated": "testlist [ 1 ]. index ( )"}, {"question": "get the position of item 1 in `testlist`\n", "answers": ["for i in ( i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ) : pass \n"], "generated": "testlist [ 1 ]. index ( )"}, {"question": "get the position of item `element` in list `testlist`\n", "answers": ["print ( testlist . index ( element ) ) \n"], "generated": "testlist [ element ]. position"}, {"question": "find the first element of the tuple with the maximum second element in a list of tuples `lis`\n", "answers": ["max ( lis , key = lambda item : item [ 1 ] ) [ 0 ] \n"], "generated": "[ x [ 0 ] for x in lis ]"}, {"question": "Make a delay of 1 second\n", "answers": ["time . sleep ( 1 ) \n"], "generated": "time. sleep ( 1 )"}, {"question": "Django set default value of field `b` equal to '0000000'\n", "answers": ["b = models . CharField ( max_length = 7 , default = '0000000' , editable = False ) \n"], "generated": "b = '0000000'"}, {"question": "How do I perform secondary sorting in python?\n", "answers": ["sorted ( list5 , key = lambda vertex : ( degree ( vertex ) , vertex ) ) \n"], "generated": "sorted ( list ( mydict. items ( ) ), key = lambda a : a [ 1 ] )"}, {"question": "remove elements from list `oldlist` that have an index number mentioned in list `removelist`\n", "answers": ["newlist = [ v for i , v in enumerate ( oldlist ) if i not in removelist ] \n"], "generated": "[ x for x in oldlist if x not in removelist ]"}, {"question": "get attribute 'attr' from object `obj`\n", "answers": ["getattr ( obj , 'attr' ) \n"], "generated": "getattr ( obj, 'attr' )"}, {"question": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line\n", "answers": ["map ( lambda a : a [ 0 ] , ( ( 'aa' , ) , ( 'bb' , ) , ( 'cc' , ) ) ) \n"], "generated": "[ ( 'aa', ), ( 'bb', ), ( 'cc', ) ]"}, {"question": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`\n", "answers": ["zip ( * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) ] ) \n"], "generated": "unzip ( [ ( 'a', 1 ), ( 'b', 2 ), ( 'c', 3 ), ( 'd', 4 ) ] )"}, {"question": "unzip list `original`\n", "answers": ["result = ( [ a for ( a , b ) in original ] , [ b for ( a , b ) in original ] ) \n"], "generated": "unzip ( original )"}, {"question": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`\n", "answers": ["zip ( * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) , ( 'e' , ) ] ) \n"], "generated": "unzip ( [ ( 'a', 1 ), ( 'b', 2 ), ( 'c', 3 ), ( 'd', 4 ), ( 'e', ) ] )"}, {"question": "encode `Decimal('3.9')` to a JSON string\n", "answers": ["json . dumps ( Decimal ( '3.9' ) ) \n"], "generated": "json. dumps ( Decimal ( 3.9 ) )"}, {"question": "Add key 'a' to dictionary `data` with value 1\n", "answers": ["data . update ( { 'a' : 1 , } ) \n"], "generated": "data. update ( { 'a' : 1 } )"}, {"question": "Add key 'a' to dictionary `data` with value 1\n", "answers": ["data . update ( a = 1 ) \n"], "generated": "data. update ( { 'a' : 1 } )"}, {"question": "Round number `answer` to 2 precision after the decimal point\n", "answers": ["answer = str ( round ( answer , 2 ) ) \n"], "generated": "int ( round ( answer, 2 ) )"}, {"question": "filter dataframe `df` by values in column `A` that appear more than once\n", "answers": ["df . groupby ( 'A' ) . filter ( lambda x : len ( x ) > 1 ) \n"], "generated": "df. groupby ( [ 'A' ] ). filter ( lambda x : x. sum ( ) > 1 )"}, {"question": "Get a list of integers `lst` from a file `filename.txt`\n", "answers": ["lst = map ( int , open ( 'filename.txt' ) . readlines ( ) ) \n"], "generated": "[ int ( line ) for line in open ( filename ). readlines ( ) ]"}, {"question": "count most frequent 100 words in column 'text' of dataframe `df`\n", "answers": ["Counter ( ' ' . join ( df [ 'text' ] ) . split ( ) ) . most_common ( 100 ) \n"], "generated": "df. groupby ( 'text' ). count ( ). reset_index ( )"}, {"question": "generate all 2-element subsets of tuple `(1, 2, 3)`\n", "answers": ["list ( itertools . combinations ( ( 1 , 2 , 3 ) , 2 ) ) \n"], "generated": "print ( list ( itertools. product ( [ 1, 2, 3 ], repeat = 2 ) ) )"}, {"question": "Get a new list `list2`by removing empty list from a list of lists `list1`\n", "answers": ["list2 = [ x for x in list1 if x != [ ] ] \n"], "generated": "list2 = [ x for x in list1 if x [ 0 ] not in list1 ]"}, {"question": "Django response with JSON `data`\n", "answers": ["return HttpResponse ( data , mimetype = 'application/json' ) \n"], "generated": "data = json. dumps ( response_data )"}, {"question": "Use a regex to get all text in a string `example_str` that is not surrounded by square brackets\n", "answers": ["re . findall ( '(.*?)(?:\\\\[.*?\\\\]|$)' , example_str ) \n"], "generated": "re. split ( '\\\\.\\\\s', example_str )"}, {"question": "match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'\n", "answers": ["re . findall ( '\\\\((.*?)\\\\)|(\\\\w)' , '(zyx)bc' ) \n"], "generated": "re. match ( '\\\\((.*?)\\\\)|(\\\\w)', '(zyx)bc' )"}, {"question": "formate each string cin list `elements` into pattern '%{0}%'\n", "answers": ["elements = [ '%{0}%' . format ( element ) for element in elements ] \n"], "generated": "print ( '{'. join ( [ str ( i [ 0 ] ) for i in elements ] ). format ( ','. join ( [ str ( i [ 1 ] ) for i in elements ] ) ) )"}, {"question": "get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'\n", "answers": ["[ mydict [ x ] for x in mykeys ] \n"], "generated": "[ v for k, v in list ( mydict. items ( ) ) if k in mykeys ]"}, {"question": "average each two columns of array `data`\n", "answers": ["data . reshape ( - 1 , j ) . mean ( axis = 1 ) . reshape ( data . shape [ 0 ] , - 1 ) \n"], "generated": "np. mean ( data [ :, ( None ) ] )"}, {"question": "split a string into a list of words and whitespace\n", "answers": ["re . split ( '(\\\\W+)' , s ) \n"], "generated": "[ 'hello world'. split ( ) for _ in re. findall ( '\\\\s+', s ) ]"}, {"question": "reverse the keys and values in a dictionary `myDictionary`\n", "answers": ["{ i [ 1 ] : i [ 0 ] for i in list ( myDictionary . items ( ) ) } \n"], "generated": "dict ( ( k, v ) for k, v in myDictionary. items ( ) )"}, {"question": "check if object `obj` is a string\n", "answers": ["isinstance ( obj , str ) \n"], "generated": "isinstance ( obj, str )"}, {"question": "check if object `o` is a string\n", "answers": ["( type ( o ) is str ) \n"], "generated": "isinstance ( o, str )"}, {"question": "check if `obj_to_test` is a string\n", "answers": ["isinstance ( obj_to_test , str ) \n"], "generated": "if ( isinstance ( obj_to_test, str ) ) : pass"}, {"question": "append list `mylog` to `list1`\n", "answers": ["list1 . extend ( mylog ) \n"], "generated": "list1. append ( mylog )"}, {"question": "append items in list `mylog` to `list1`\n", "answers": ["for line in mylog : list1 . append ( line ) \n"], "generated": "mylog. append ( [ 'foo', 'bar' ] )"}, {"question": "Initialize `SECRET_KEY` in flask config with `Your_secret_string `\n", "answers": ["app . config [ 'SECRET_KEY' ] = 'Your_secret_string' \n"], "generated": "app. config [ 'SECRET_KEY' ] = 'Your_secret_string'"}, {"question": "find the index of an element 'MSFT' in a list `stocks_list`\n", "answers": ["[ x for x in range ( len ( stocks_list ) ) if stocks_list [ x ] == 'MSFT' ] \n"], "generated": "list ( stocks_list. items ( ) ). index ( 'MSFT' )"}, {"question": "remove symbols from a string `s`\n", "answers": ["re . sub ( '[^\\\\w]' , ' ' , s ) \n"], "generated": "re. sub ( '\\\\S+\\\\S+', '', s )"}, {"question": "Find octal characters matches from a string `str` using regex\n", "answers": ["print ( re . findall ( \"'\\\\\\\\[0-7]{1,3}'\" , str ) ) \n"], "generated": "re. findall ( '\\\\d+\\\\.\\\\d+', str )"}, {"question": "Split string `input` at every space followed by an upper-case letter\n", "answers": ["re . split ( '[ ](?=[A-Z])' , input ) \n"], "generated": "[ input. split ('', 1 ) for input in input. split ('', 1 ) ]"}, {"question": "write bytes `bytes_` to a file `filename` in python 3\n", "answers": ["open ( 'filename' , 'wb' ) . write ( bytes_ ) \n"], "generated": "f. write ( bytes ( 'bytes_' ) )"}, {"question": "find duplicate names in column 'name' of the dataframe `x`\n", "answers": ["x . set_index ( 'name' ) . index . get_duplicates ( ) \n"], "generated": "x. groupby ( 'name' ). count ( )"}, {"question": "sort list `li` in descending order based on the date value in second element of each list in list `li`\n", "answers": ["sorted ( li , key = lambda x : datetime . strptime ( x [ 1 ] , '%d/%m/%Y' ) , reverse = True ) \n"], "generated": "li. sort ( key = lambda x : x [ 2 ], reverse = True )"}, {"question": "check if path `my_path` is an absolute path\n", "answers": ["os . path . isabs ( my_path ) \n"], "generated": "if ( os. path. isabs ( my_path ) ) : pass"}, {"question": "count the number of keys in dictionary `yourdictfile`\n", "answers": ["len ( set ( open ( yourdictfile ) . read ( ) . split ( ) ) ) \n"], "generated": "len ( yourdictfile. keys ( ) )"}, {"question": "split a list in first column  into multiple columns keeping other columns as well in pandas data frame\n", "answers": ["pd . concat ( [ df [ 0 ] . apply ( pd . Series ) , df [ 1 ] ] , axis = 1 ) \n"], "generated": "df. groupby ( [ 'a' ] ). agg ( lambda x : x. tolist ( ) )"}, {"question": "Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`\n", "answers": ["sum ( int ( float ( item ) ) for item in [ _f for _f in [ '' , '3.4' , '' , '' , '1.0' ] if _f ] ) \n"], "generated": "sum ( [ int ( x ) for x in [ '', '3.4', '', '', '1.0' ] ] )"}, {"question": "reverse a priority queue `q` in python without using classes\n", "answers": ["q . put ( ( - n , n ) ) \n"], "generated": "q. reverse ( )"}, {"question": "find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`\n", "answers": ["re . findall ( '([a-fA-F\\\\d]{32})' , data ) \n"], "generated": "re. findall ( '([a-fA-F\\\\d]{32})', data )"}, {"question": "Getting the length of array `l`\n", "answers": ["len ( l ) \n"], "generated": "np. length ( l )"}, {"question": "Getting the length of `my_tuple`\n", "answers": ["len ( my_tuple ) \n"], "generated": "len ( my_tuple )"}, {"question": "remove escape character from string \"\\\\a\"\n", "answers": ["\"\"\"\\\\a\"\"\" . decode ( 'string_escape' ) \n"], "generated": "re. sub ( '\\\\a\\\\', '', '\\\\a' )"}, {"question": "remove directory tree '/folder_name'\n", "answers": ["shutil . rmtree ( '/folder_name' ) \n"], "generated": "os. rmdir ( '/folder_name' )"}, {"question": "reverse sort Counter `x` by values\n", "answers": ["sorted ( x , key = x . get , reverse = True ) \n"], "generated": "sorted ( Counter ( x ), key = lambda x : x [ 1 ] [ 0 ] )"}, {"question": "append a numpy array 'b' to a numpy array 'a'\n", "answers": ["np . vstack ( ( a , b ) ) \n"], "generated": "a. append ( b )"}, {"question": "numpy concatenate two arrays `a` and `b` along the second axis\n", "answers": ["print ( concatenate ( ( a , b ) , axis = 1 ) ) \n"], "generated": "numpy. concatenate ( a, b, axis = 1 )"}, {"question": "numpy concatenate two arrays `a` and `b` along the first axis\n", "answers": ["np . array ( ( a , b ) ) \n"], "generated": "numpy. concatenate ( a, b, axis = 0 )"}, {"question": "add a column 'day' with value 'sat' to dataframe `df`\n", "answers": ["df . xs ( 'sat' , level = 'day' , drop_level = False ) \n"], "generated": "df. day = df. day. str. lower ( ). replace ('sat','sun' )"}, {"question": "Flask set folder 'wherever' as the default template folder\n", "answers": ["Flask ( __name__ , template_folder = 'wherever' ) \n"], "generated": "app. set_template_folder ( 'wherever' )"}, {"question": "sort a list of lists 'c2' such that third row comes first\n", "answers": ["c2 . sort ( key = lambda row : row [ 2 ] ) \n"], "generated": "c2. sort ( key = lambda x : x [ 2 ], reverse = True )"}, {"question": "Sorting a list of lists in Python\n", "answers": ["c2 . sort ( key = lambda row : ( row [ 2 ] , row [ 1 ] ) ) \n"], "generated": "sorted ( list ( listone ), key = lambda x : x [ 1 ] )"}, {"question": "Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal\n", "answers": ["df [ 'date' ] . apply ( lambda x : x . toordinal ( ) ) \n"], "generated": "df [ 'date' ] = pd. to_datetime ( df [ 'date' ] )"}, {"question": "Get the integer location of a key `bob` in a pandas data frame\n", "answers": ["df . index . get_loc ( 'bob' ) \n"], "generated": "df. groupby ( [ 'bob' ] ). loc [ df [ 'bob' ]. idxmax ( ) ]"}, {"question": "add an item with key 'third_key' and value 1 to an dictionary `my_dict`\n", "answers": ["my_dict . update ( { 'third_key' : 1 } ) \n"], "generated": "my_dict. update ( { 'third_key' : 1, } )"}, {"question": "Insert item `12` to a list `my_list`\n", "answers": ["my_list . append ( 12 ) \n"], "generated": "my_list. insert ( 12, 'foo' )"}, {"question": "convert a hex-string representation to actual bytes\n", "answers": ["\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\" . replace ( '\\\\x' , '' ) . decode ( 'hex' ) \n"], "generated": "struct. unpack ( '<I', struct. unpack ( '<Q', s ) ) [ 0 ]"}, {"question": "get the first value from dataframe `df` where column 'Letters' is equal to 'C'\n", "answers": ["df . loc [ df [ 'Letters' ] == 'C' , 'Letters' ] . values [ 0 ] \n"], "generated": "df [ 'Letters' ]. str. split ( 'C' ). first ( )"}, {"question": "get the type of `i`\n", "answers": ["type ( i ) \n"], "generated": "type ( i )"}, {"question": "determine the type of variable `v`\n", "answers": ["type ( v ) \n"], "generated": "type ( v )"}, {"question": "determine the type of variable `v`\n", "answers": ["type ( v ) \n"], "generated": "type ( v )"}, {"question": "get the 5th item of a generator\n", "answers": ["next ( itertools . islice ( range ( 10 ) , 5 , 5 + 1 ) ) \n"], "generated": "itertools. product ( [ 1, 2, 3, 4, 5 ], repeat = 5 )"}, {"question": "join a list of strings `list` using a space ' '\n", "answers": ["\"\"\" \"\"\" . join ( list ) \n"], "generated": "' '. join ( list )"}, {"question": "read a file 'C:/name/MyDocuments/numbers' into a list `data`\n", "answers": ["data = [ line . strip ( ) for line in open ( 'C:/name/MyDocuments/numbers' , 'r' ) ] \n"], "generated": "data = open ( 'C:/name/MyDocuments/numbers', 'r' ). read ( )"}, {"question": "delete all instances of a character 'i' in a string 'it is icy'\n", "answers": ["re . sub ( 'i' , '' , 'it is icy' ) \n"], "generated": "re. sub ( '\\\\i\\\\W+', 'i', 'it is icy' )"}, {"question": "How to delete all instances of a character in a string in python?\n", "answers": ["\"\"\"\"\"\" . join ( [ char for char in 'it is icy' if char != 'i' ] ) \n"], "generated": "s = re. sub ( '\\\\w+', '', s )"}, {"question": "get elements from list `myList`, that have a field `n` value 30\n", "answers": ["[ x for x in myList if x . n == 30 ] \n"], "generated": "[ ( x, y ) for x, y in myList if y. n == 30 ]"}, {"question": "convert list of string numbers into list of integers\n", "answers": ["map ( int , eval ( input ( 'Enter the unfriendly numbers: ' ) ) ) \n"], "generated": "[ int ( x ) for x in '0,1,2'. split ( ',' ) ]"}, {"question": "round off the float that is the product of `2.52 * 100` and convert it to an int\n", "answers": ["int ( round ( 2.51 * 100 ) ) \n"], "generated": "round ( float ( 2.52 * 100 ) * 100 )"}, {"question": "Find all files in directory \"/mydir\" with extension \".txt\"\n", "answers": ["for file in os . listdir ( '/mydir' ) : if file . endswith ( '.txt' ) : pass \n"], "generated": "for ( dirname, dirnames, filenames ) in os. walk ( '/mydir' ) : for filename in filenames : print ( os. path. join ( dirname, filename ) )"}, {"question": "plot dataframe `df` without a legend\n", "answers": ["df . plot ( legend = False ) \n"], "generated": "df. plot ( )"}, {"question": "loop through the IP address range \"192.168.x.x\"\n", "answers": ["for ( i , j ) in product ( list ( range ( 256 ) ) , list ( range ( 256 ) ) ) : pass \n"], "generated": "for ip in range ( 192, 255 ) : pass"}, {"question": "Sum the corresponding decimal values for binary values of each boolean element in list `x`\n", "answers": ["sum ( 1 << i for i , b in enumerate ( x ) if b ) \n"], "generated": "sum ( x [ 1 ] for x in list ( x. values ( ) ) )"}, {"question": "Convert list of lists `data` into a flat list\n", "answers": ["[ y for x in data for y in ( x if isinstance ( x , list ) else [ x ] ) ] \n"], "generated": "[ list ( x ) for x in list ( data ) ]"}, {"question": "remove last comma character ',' in string `s`\n", "answers": ["\"\"\"\"\"\" . join ( s . rsplit ( ',' , 1 ) ) \n"], "generated": "s. split ( ',', 1 ) [ - 1 ]"}, {"question": "get an array of the mean of each two consecutive values in numpy array `x`\n", "answers": ["x [ : - 1 ] + ( x [ 1 : ] - x [ : - 1 ] ) / 2 \n"], "generated": "np. mean ( x, axis = 1 )"}, {"question": "reverse sort list of dicts `l` by value for key `time`\n", "answers": ["l = sorted ( l , key = itemgetter ( 'time' ) , reverse = True ) \n"], "generated": "l. sort ( key = lambda x : x [ 1 ] [ 'time' ] )"}, {"question": "get rows of dataframe `df` that match regex '(Hel|Just)'\n", "answers": ["df . loc [ df [ 0 ] . str . contains ( '(Hel|Just)' ) ] \n"], "generated": "df. where ( df. Col1. isin ( [ 'Hel', 'Just' ] ) )"}, {"question": "How to create a list of date string in 'yyyymmdd' format with Python Pandas?\n", "answers": ["[ d . strftime ( '%Y%m%d' ) for d in pandas . date_range ( '20130226' , '20130302' ) ] \n"], "generated": "date_list = [ datetime. datetime. strptime ( '2012-01-01', '%Y-%m-%d' ). date ( ) for _ in range ( 10 ) ]"}, {"question": "decode json string `request.body` to python dict\n", "answers": ["json . loads ( request . body ) \n"], "generated": "json. loads ( request. body )"}, {"question": "split string `text` by space\n", "answers": ["text . split ( ) \n"], "generated": "re. split ('', text )"}, {"question": "Split string `line` into a list by whitespace\n", "answers": ["line . split ( ) \n"], "generated": "[ x. split ('' ) for x in line. split ( ) ]"}, {"question": "sort list `list_of_strings` based on second index of each string `s`\n", "answers": ["sorted ( list_of_strings , key = lambda s : s . split ( ',' ) [ 1 ] ) \n"], "generated": "list_of_strings. sort ( key = lambda x : x [ 2 ] )"}, {"question": "eliminate all strings from list `lst`\n", "answers": ["[ element for element in lst if isinstance ( element , int ) ] \n"], "generated": "[ x for x in lst if x == '' ]"}, {"question": "Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`\n", "answers": ["newlist = sorted ( list_to_be_sorted , key = lambda k : k [ 'name' ] ) \n"], "generated": "list_to_be_sorted. sort ( key = lambda x : x [ 1 ] [ 'name' ] )"}, {"question": "How do I sort a list of dictionaries by values of the dictionary in Python?\n", "answers": ["list_of_dicts . sort ( key = operator . itemgetter ( 'name' ) ) \n"], "generated": "sorted ( list ( d. items ( ) ), key = lambda x : x [ 1 ] )"}, {"question": "How to sort a Dataframe by the ocurrences in a column in Python (pandas)\n", "answers": ["df . groupby ( 'prots' ) . sum ( ) . sort ( 'scores' , ascending = False ) \n"], "generated": "df. sort_values ( [ 'Peak', 'Weeks' ], ascending = [ True, False ], inplace = True )"}, {"question": "concatenate array of strings `['A', 'B', 'C', 'D']` into a string\n", "answers": ["\"\"\"\"\"\" . join ( [ 'A' , 'B' , 'C' , 'D' ] ) \n"], "generated": "\"\"\"\"\"\". join ( [ 'A', 'B', 'C', 'D' ] )"}, {"question": "Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`\n", "answers": ["[ x for x in sents if not x . startswith ( '@$\\t' ) and not x . startswith ( '#' ) ] \n"], "generated": "[ x for x in sents if not any ( c. startswith ( '@$\\t' ) or c. startswith ( '#' ) for c in x ) ]"}, {"question": "sort a list of dictionary `list` first by key `points` and then by `time`\n", "answers": ["list . sort ( key = lambda item : ( item [ 'points' ] , item [ 'time' ] ) ) \n"], "generated": "list. sort ( key = lambda x : x [ 1 ] [ 'points' ], reverse = True )"}, {"question": "insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.\n", "answers": ["re . sub ( '(\\\\_a)?\\\\.([^\\\\.]*)$' , '_suff.\\\\2' , 'long.file.name.jpg' ) \n"], "generated": "long. file. name. replace ( '_a', '_suff' )"}, {"question": "Convert integer `number` into an unassigned integer\n", "answers": ["struct . unpack ( 'H' , struct . pack ( 'h' , number ) ) \n"], "generated": "int ( number )"}, {"question": "write dataframe `df`, excluding index, to a csv file\n", "answers": ["df . to_csv ( filename , index = False ) \n"], "generated": "df. write ('mycsv.csv', index = False )"}, {"question": "Create a list containing all ascii characters as its elements\n", "answers": ["[ chr ( i ) for i in range ( 127 ) ] \n"], "generated": "list ( ord ( 'a' ) )"}, {"question": "python regex - check for a capital letter with a following lowercase in string `string`\n", "answers": ["re . sub ( '^[A-Z0-9]*(?![a-z])' , '' , string ) \n"], "generated": "re. search ( '\\\\b[A-Z]\\\\w*', string )"}, {"question": "write line \"hi there\" to file `f`\n", "answers": ["print ( 'hi there' , file = f ) \n"], "generated": "f. write ( 'hi there' )"}, {"question": "write line \"Hello\" to file `somefile.txt`\n", "answers": ["with open ( 'somefile.txt' , 'a' ) as the_file : the_file . write ( 'Hello\\n' ) \n"], "generated": "with open ('somefile.txt', 'w' ) as f : f. write ( 'Hello' )"}, {"question": "Django get maximum value associated with field 'added' in model `AuthorizedEmail`\n", "answers": ["AuthorizedEmail . objects . filter ( group = group ) . order_by ( '-added' ) [ 0 ] \n"], "generated": "AuthorizedEmail. objects. max ( )"}, {"question": "python regex  to find all numbers and dots from 'text'\n", "answers": ["re . findall ( 'Test([\\\\d.]*\\\\d+)' , text ) \n"], "generated": "re. findall ( '\\\\d+|\\\\.\\\\d+', text )"}, {"question": "Sort a list of tuples `b` by third item in the tuple\n", "answers": ["b . sort ( key = lambda x : x [ 1 ] [ 2 ] ) \n"], "generated": "b. sort ( key = lambda x : x [ 2 ] )"}, {"question": "create a datetime with the current date & time\n", "answers": ["datetime . datetime . now ( ) \n"], "generated": "datetime. datetime. now ( ). date ( )"}, {"question": "subtract 13 from every number in a list `a`\n", "answers": ["a [ : ] = [ ( x - 13 ) for x in a ] \n"], "generated": "[ ( x - 13 ) for x in a ]"}, {"question": "get the highest element in absolute value in a numpy matrix `x`\n", "answers": ["max ( x . min ( ) , x . max ( ) , key = abs ) \n"], "generated": "np. max ( np. abs ( x ) )"}, {"question": "match urls whose domain doesn't start with `t` from string `document` using regex\n", "answers": ["re . findall ( 'http://[^t][^s\"]+\\\\.html' , document ) \n"], "generated": "re. compile ( '^t(\\\\w+)?://(\\\\w+)?(\\\\w+)?(\\\\w+)?(\\\\w+)?$', re. IGNORECASE )"}, {"question": "open file `path` with mode 'r'\n", "answers": ["open ( path , 'r' ) \n"], "generated": "f = open ( path, 'r' )"}, {"question": "add a new axis to array `a`\n", "answers": ["a [ : , ( np . newaxis ) ] \n"], "generated": "a = np. array ( [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ] ). reshape ( ( 1, 3 ) )"}, {"question": "send a signal `signal.SIGUSR1` to the current process\n", "answers": ["os . kill ( os . getpid ( ) , signal . SIGUSR1 ) \n"], "generated": "os. kill ( process. pid, signal. SIGUSR1 )"}, {"question": "check if all elements in list `myList` are identical\n", "answers": ["all ( x == myList [ 0 ] for x in myList ) \n"], "generated": "all ( isinstance ( x, int ) for x in myList )"}, {"question": "How to convert a string from CP-1251 to UTF-8?\n", "answers": ["d . decode ( 'cp1251' ) . encode ( 'utf8' ) \n"], "generated": "print ( '\\x{0:x}'. decode ( 'cp1251' ). encode ( 'utf-8' ) )"}, {"question": "get rid of None values in dictionary `kwargs`\n", "answers": ["res = dict ( ( k , v ) for k , v in kwargs . items ( ) if v is not None ) \n"], "generated": "{ k : v for k, v in list ( kwargs. items ( ) ) if v is not None }"}, {"question": "concatenate a list of strings `['a', 'b', 'c']`\n", "answers": ["\"\"\"\"\"\" . join ( [ 'a' , 'b' , 'c' ] ) \n"], "generated": "\"\"\"\"\"\". join ( [ 'a', 'b', 'c' ] )"}, {"question": "sending http headers to `client`\n", "answers": ["client . send ( 'HTTP/1.0 200 OK\\r\\n' ) \n"], "generated": "client. send ( 'HTTP/1.1 200 OK\\r\\n\\r\\n' )"}, {"question": "split a multi-line string `inputString` into separate strings\n", "answers": ["inputString . split ( '\\n' ) \n"], "generated": "[ s. split ( '\\n' ) for s in inputString. split ( ) ]"}, {"question": "concatenate elements of list `b` by a colon \":\"\n", "answers": ["\"\"\":\"\"\" . join ( str ( x ) for x in b ) \n"], "generated": "re. sub ( '\\\\s*(?:\\\\w+:\\\\w+)*', ':', b )"}, {"question": "Calculate sum over all rows of 2D numpy array\n", "answers": ["a . sum ( axis = 1 ) \n"], "generated": "np. sum ( np. array ( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] ) )"}, {"question": "concatenate items of list `l` with a space ' '\n", "answers": ["print ( ' ' . join ( map ( str , l ) ) ) \n"], "generated": "l. join ('' )"}, {"question": "How can I parse a time string containing milliseconds in it with python?\n", "answers": ["time . strptime ( '30/03/09 16:31:32.123' , '%d/%m/%y %H:%M:%S.%f' ) \n"], "generated": "time. strptime ( '00:00:00', '%H:%M:%S' ). time ( )"}, {"question": "convert a string `123,456.908` with dot and comma into a floating number\n", "answers": ["float ( '123,456.908' . replace ( ',' , '' ) ) \n"], "generated": "struct. unpack ( 'd', '123,456.908' ) [ 0 ]"}, {"question": "split string 'Words, words, words.' using a regex '(\\\\W+)'\n", "answers": ["re . split ( '(\\\\W+)' , 'Words, words, words.' ) \n"], "generated": "re. split ( '\\\\W+', 'Words, words, words.' )"}, {"question": "download a file \"http://www.example.com/songs/mp3.mp3\" over HTTP and save to \"mp3.mp3\"\n", "answers": ["urllib . request . urlretrieve ( 'http://www.example.com/songs/mp3.mp3' , 'mp3.mp3' ) \n"], "generated": "urllib. request. urlretrieve ( 'http://www.example.com/songs/mp3.mp3','mp3.mp3' )"}, {"question": "download a file 'http://www.example.com/' over HTTP\n", "answers": ["response = urllib . request . urlopen ( 'http://www.example.com/' ) html = response . read ( ) \n"], "generated": "urllib. request. urlretrieve ( 'http://www.example.com/', 'file.txt' )"}, {"question": "download a file `url` over HTTP and save to \"10MB\"\n", "answers": ["response = requests . get ( url , stream = True ) with open ( '10MB' , 'wb' ) as handle : for data in tqdm ( response . iter_content ( ) ) : handle . write ( data ) \n"], "generated": "urllib. request. urlretrieve ( 'http://www.python.org/', '10MB' )"}, {"question": "remove key 'c' from dictionary `d`\n", "answers": ["{ i : d [ i ] for i in d if i != 'c' } \n"], "generated": "del d [ 'c' ]"}, {"question": "Split a string `s` by space with `4` splits\n", "answers": ["s . split ( ' ' , 4 ) \n"], "generated": "[ s. split ('', 4 ) for s in input ( ). split ( ',' ) ]"}, {"question": "enable debug mode on Flask application `app`\n", "answers": ["app . run ( debug = True ) \n"], "generated": "app. run ( debug = True )"}, {"question": "Multiply a matrix `P` with a 3d tensor `T` in scipy\n", "answers": ["scipy . tensordot ( P , T , axes = [ 1 , 1 ] ) . swapaxes ( 0 , 1 ) \n"], "generated": "np. dot ( P, T )"}, {"question": "cut off the last word of a sentence `content`\n", "answers": ["\"\"\" \"\"\" . join ( content . split ( ' ' ) [ : - 1 ] ) \n"], "generated": "content. split ('', 1 ) [ - 1 ]"}, {"question": "sum all elements of nested list `L`\n", "answers": ["sum ( sum ( i ) if isinstance ( i , list ) else i for i in L ) \n"], "generated": "sum ( sum ( x ) for x in L )"}, {"question": "Multiple each value by `2` for all keys in a dictionary `my_dict`\n", "answers": ["my_dict . update ( ( x , y * 2 ) for x , y in list ( my_dict . items ( ) ) ) \n"], "generated": "dict ( ( v, k ) for k, v in my_dict. items ( ) for v in [ 2, 4, 6, 8 ] )"}, {"question": "Join elements of list `l` with a comma `,`\n", "answers": ["\"\"\",\"\"\" . join ( l ) \n"], "generated": "[ ','. join ( x ) for x in l ]"}, {"question": "reverse the list that contains 1 to 10\n", "answers": ["list ( reversed ( list ( range ( 10 ) ) ) ) \n"], "generated": "[ reverse ( range ( 1, 11 ) ) ]"}, {"question": "Reverse the order of words, delimited by `.`, in string `s`\n", "answers": ["\"\"\".\"\"\" . join ( s . split ( '.' ) [ : : - 1 ] ) \n"], "generated": "re. sub ( '\\\\.\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+\\\\s*\\\\w+\\\\w+"}, {"question": "parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'\n", "answers": ["time . strftime ( '%Y-%m-%d %H:%M:%S' , time . gmtime ( 1236472051807 / 1000.0 ) ) \n"], "generated": "datetime. datetime. strptime ( '1236472051807', '%Y-%m-%d %H:%M:%S' ). strftime ( '%Y-%m-%d %H:%M:%S' )"}, {"question": "sum elements at index `column` of each list in list `data`\n", "answers": ["print ( sum ( row [ column ] for row in data ) ) \n"], "generated": "sum ( x [ 1 ] for x in data )"}, {"question": "encode binary string 'your string' to base64 code\n", "answers": ["base64 . b64encode ( bytes ( 'your string' , 'utf-8' ) ) \n"], "generated": "print ( base64. encode ( 'your string' ) )"}, {"question": "Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`\n", "answers": ["{ k : [ d [ k ] for d in dicts ] for k in dicts [ 0 ] } \n"], "generated": "dict ( ( k, v ) for k, v in dicts. items ( ) for v in dicts [ k ] )"}, {"question": "identify duplicate values in list `mylist`\n", "answers": ["[ k for k , v in list ( Counter ( mylist ) . items ( ) ) if v > 1 ] \n"], "generated": "[ key for key, value in list ( mylist ) for key in list ( mylist ) if value == value ]"}, {"question": "modify sys.path for python module `subdir`\n", "answers": ["sys . path . append ( os . path . join ( os . path . dirname ( __file__ ) , 'subdir' ) ) \n"], "generated": "sys. path. insert ( 0,'subdir' )"}, {"question": "flatten list `list_of_menuitems`\n", "answers": ["[ image for menuitem in list_of_menuitems for image in menuitem ] \n"], "generated": "list ( itertools. chain. from_iterable ( list_of_menuitems ) )"}, {"question": "Append elements of a set to a list in Python\n", "answers": ["a . extend ( list ( b ) ) \n"], "generated": "[ ( k, v ) for k, v in set ( list ( x ) for x in set ) ]"}, {"question": "write content of DataFrame `df` into text file 'c:\\\\data\\\\pandas.txt'\n", "answers": ["df . to_csv ( 'c:\\\\data\\\\pandas.txt' , header = None , index = None , sep = ' ' , mode = 'a' ) \n"], "generated": "df. to_csv ( 'c:\\\\data\\\\pandas.txt', header = False )"}, {"question": "get the last part of a string before the character '-'\n", "answers": ["print ( x . rsplit ( '-' , 1 ) [ 0 ] ) \n"], "generated": "some_string [ : - 1 ]"}, {"question": "add one to the hidden web element with id 'XYZ' with selenium python script\n", "answers": ["browser . execute_script ( \"document.getElementById('XYZ').value+='1'\" ) \n"], "generated": "driver. find_element_by_id ( 'XYZ' ). send_keys ( '1' )"}, {"question": "print a list `l` and move first 3 elements to the end of the list\n", "answers": ["print ( l [ 3 : ] + l [ : 3 ] ) \n"], "generated": "l [ : 3 ] + l [ - 3 : ]"}, {"question": "loop over files in directory `source`\n", "answers": ["for ( root , dirs , filenames ) in os . walk ( source ) : for f in filenames : pass \n"], "generated": "for ( source, filenames ) in os. walk ( source ) : pass"}, {"question": "Using %f with strftime() in Python to get microseconds\n", "answers": ["datetime . datetime . now ( ) . strftime ( '%H:%M:%S.%f' ) \n"], "generated": "print ( '%f' % ( time. strftime ( '%f', time. gmtime ( os. path. getmtime ( file ) ) ) ) )"}, {"question": "filter rows in pandas starting with alphabet 'f' using regular expression.\n", "answers": ["df . b . str . contains ( '^f' ) \n"], "generated": "df. filter ( re. search ( 'f', 'a' ) )"}, {"question": "pandas: delete rows in dataframe `df` based on multiple columns values\n", "answers": ["df . set_index ( list ( 'BC' ) ) . drop ( tuples , errors = 'ignore' ) . reset_index ( ) \n"], "generated": "df. drop ( df. columns [ [ 'A', 'B', 'C' ] ], axis = 1 )"}, {"question": "format string \"({} goals, ${})\" with variables `goals` and `penalties`\n", "answers": ["\"\"\"({} goals, ${})\"\"\" . format ( self . goals , self . penalties ) \n"], "generated": "\"\"\"{} goals, ${}\"\"\". format ( goals = '10', penalties = '20' )"}, {"question": "convert list of lists `L` to list of integers\n", "answers": ["[ int ( '' . join ( str ( d ) for d in x ) ) for x in L ] \n"], "generated": "[ int ( i ) for i in L ]"}, {"question": "convert a list of lists `L` to list of integers\n", "answers": ["L = [ int ( '' . join ( [ str ( y ) for y in x ] ) ) for x in L ] \n"], "generated": "[ int ( i ) for i in L ]"}, {"question": "removing an element from a list based on a predicate 'X' or 'N'\n", "answers": ["[ x for x in [ 'AAT' , 'XAC' , 'ANT' , 'TTA' ] if 'X' not in x and 'N' not in x ] \n"], "generated": "[ x for x in lst if x not in lst if x == 'X' or x == 'N' ]"}, {"question": "count non zero values in each column in pandas data frame\n", "answers": ["df . astype ( bool ) . sum ( axis = 1 ) \n"], "generated": "df. groupby ( [ 'col1', 'col2', 'col3', 'col4', 'col5' ] ). sum ( )"}, {"question": "split string 'QH QD JC KD JS' into a list on white spaces\n", "answers": ["\"\"\"QH QD JC KD JS\"\"\" . split ( ) \n"], "generated": "re. split ( '\\\\s+', 'QH QD JC KD JS' )"}, {"question": "erase all the contents of a file `filename`\n", "answers": ["open ( filename , 'w' ) . close ( ) \n"], "generated": "shutil. rm ( filename )"}, {"question": "find the index of a list with the first element equal to '332' within the list of lists `thelist`\n", "answers": ["[ index for index , item in enumerate ( thelist ) if item [ 0 ] == '332' ] \n"], "generated": "[ x for x in thelist if x [ 0 ] == '332' ]"}, {"question": "remove all non-alphanumeric characters except space from a string `text` and lower it\n", "answers": ["re . sub ( '(?!\\\\s)[\\\\W_]' , '' , text ) . lower ( ) . strip ( ) \n"], "generated": "re. sub ( '\\\\W+', '', text ). lower ( )"}, {"question": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.\n", "answers": ["plt . plot ( x , y , label = '$H_2O$' ) \n"], "generated": "ax. set_xticks ( [ 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20', 'H20',"}, {"question": "initialize a list `lst` of 100 objects Object()\n", "answers": ["lst = [ Object ( ) for _ in range ( 100 ) ] \n"], "generated": "lst = [ Object ( ) for i in range ( 100 ) ]"}, {"question": "get the content of child tag with`href` attribute whose parent has css `someclass`\n", "answers": ["self . driver . find_element_by_css_selector ( '.someclass a' ) . get_attribute ( 'href' ) \n"], "generated": "print ( soup. find ( 'a', href = re. compile ('someclass' ) ). get_text ( ) )"}, {"question": "use `%s` operator to print variable values `str1` inside a string\n", "answers": ["'first string is: %s, second one is: %s' % ( str1 , 'geo.tif' ) \n"], "generated": "print ( '%s' % str1 )"}, {"question": "check if directory `directory ` exists and create it if necessary\n", "answers": ["if ( not os . path . exists ( directory ) ) : os . makedirs ( directory ) \n"], "generated": "if ( not os. path. exists ( directory ) ) : os. mkdir ( directory )"}, {"question": "check if a directory `path` exists and create it if necessary\n", "answers": ["distutils . dir_util . mkpath ( path ) \n"], "generated": "if ( not os. path. exists ( path ) ) :"}, {"question": "Replace a separate word 'H3' by 'H1' in a string 'text'\n", "answers": ["re . sub ( '\\\\bH3\\\\b' , 'H1' , text ) \n"], "generated": "re. sub ( '\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w+\\\\w"}, {"question": "get digits only from a string `aas30dsa20` using lambda function\n", "answers": ["\"\"\"\"\"\" . join ( [ x for x in 'aas30dsa20' if x . isdigit ( ) ] ) \n"], "generated": "lambda s : map ( int, re. findall ( '\\\\d+', s ) )"}, {"question": "get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`\n", "answers": ["records = dict ( ( record [ '_id' ] , record ) for record in cursor ) \n"], "generated": "cursor. find ('records', { } )"}, {"question": "concat two matrices `A` and `B` in numpy\n", "answers": ["np . vstack ( ( A , B ) ) \n"], "generated": "numpy. concatenate ( A, B )"}, {"question": "count the occurrences of item \"a\" in list `l`\n", "answers": ["l . count ( 'a' ) \n"], "generated": "sum ( 1 for i in l if i == 'a' )"}, {"question": "count the occurrences of items in list `l`\n", "answers": ["[ [ x , l . count ( x ) ] for x in set ( l ) ] \n"], "generated": "sum ( 1 for i in l )"}, {"question": "count the occurrences of item \"b\" in list `l`\n", "answers": ["l . count ( 'b' ) \n"], "generated": "sum ( 1 for i in l for i in range ( len ( l ) ) )"}, {"question": "find the key associated with the largest value in dictionary `x` whilst key is non-zero value\n", "answers": ["max ( k for k , v in x . items ( ) if v != 0 ) \n"], "generated": "max ( x, key = lambda x : x [ 1 ] )"}, {"question": "get the largest key in a dictionary `x` with non-zero value\n", "answers": ["max ( k for k , v in x . items ( ) if v != 0 ) \n"], "generated": "max ( x, key = lambda x : x [ 1 ] [ 1 ] )"}, {"question": "combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`\n", "answers": ["df [ 'c' ] = np . where ( df [ 'a' ] . isnull , df [ 'b' ] , df [ 'a' ] ) \n"], "generated": "df. groupby ( [ 'b', 'a' ] ). sum ( )"}, {"question": "Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years\n", "answers": ["MyModel . objects . update ( timestamp = F ( 'timestamp' ) + timedelta ( days = 36524.25 ) ) \n"], "generated": "MyModel. objects. update ( timestamp = datetime. datetime. now ( ) + datetime. timedelta ( days = 1, hours = 100 ) )"}, {"question": "increment a value with leading zeroes in a number `x`\n", "answers": ["str ( int ( x ) + 1 ) . zfill ( len ( x ) ) \n"], "generated": "x = x + 1"}, {"question": "Convert tuple `t` to list\n", "answers": ["list ( t ) \n"], "generated": "[ t [ 0 ] for t in list ( t ) ]"}, {"question": "Convert tuple `level1` to list\n", "answers": ["level1 = map ( list , level1 ) \n"], "generated": "[ ( level1 [ 0 ], level1 [ 1 ] ) for level1 in main_list ]"}, {"question": "get index of rows in column 'BoolCol'\n", "answers": ["df . loc [ df [ 'BoolCol' ] ] \n"], "generated": "df. index. values. tolist ( )"}, {"question": "get list of indexes of rows where column 'BoolCol' values match True\n", "answers": ["df [ df [ 'BoolCol' ] == True ] . index . tolist ( ) \n"], "generated": "[ x for x in df. index. values ( ) if x [ 'BoolCol' ] == True ]"}, {"question": "change working directory to the directory `owd`\n", "answers": ["os . chdir ( owd ) \n"], "generated": "os. chdir ( 'owd' )"}, {"question": "decode string \"\\\\x89\\\\n\" into a normal string\n", "answers": ["\"\"\"\\\\x89\\\\n\"\"\" . decode ( 'string_escape' ) \n"], "generated": "\"\"\"\\\\x89\\\\n\"\"\". decode ('string_escape' )"}, {"question": "convert a raw string `raw_byte_string` into a normal string\n", "answers": ["raw_byte_string . decode ( 'unicode_escape' ) \n"], "generated": "raw_byte_string. decode ('string_escape' )"}, {"question": "scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none\n", "answers": ["plt . scatter ( np . random . randn ( 100 ) , np . random . randn ( 100 ) , facecolors = 'none' ) \n"], "generated": "scatter ( np. random. randn ( 100 ), 'none', s = 100, color = 'none' )"}, {"question": "remove a div with a id `main-content` using beautifulsoup\n", "answers": ["soup . find ( 'div' , id = 'main-content' ) . decompose ( ) \n"], "generated": "soup. findAll ( 'div', id = re. compile ('main-content' ) )"}, {"question": "convert index at level 0 into a column in dataframe `df`\n", "answers": ["df . reset_index ( level = 0 , inplace = True ) \n"], "generated": "df. set_index ( [ 'a', 'b', 'c' ] )"}, {"question": "convert pandas index in a dataframe to columns\n", "answers": ["df . reset_index ( level = [ 'tick' , 'obs' ] ) \n"], "generated": "df. set_index ( [ 'index' ] )"}, {"question": "join each element in array `a` with element at the same index in array `b` as a tuple\n", "answers": ["np . array ( [ zip ( x , y ) for x , y in zip ( a , b ) ] ) \n"], "generated": "a [ tuple ( a [ :, ( None ) ] ) ]"}, {"question": "convert list `list_of_ints` into a comma separated string\n", "answers": ["\"\"\",\"\"\" . join ( [ str ( i ) for i in list_of_ints ] ) \n"], "generated": "[ ','. join ( map ( int, list_of_ints ) ) ]"}, {"question": "Find last occurrence of character '}' in string \"abcd}def}\"\n", "answers": ["'abcd}def}' . rfind ( '}' ) \n"], "generated": "\"\"\"abcd}def}\"\"\"\". find ( '}' )"}, {"question": "extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples\n", "answers": ["[ ( x [ 'x' ] , x [ 'y' ] ) for x in d ] \n"], "generated": "[ ( d [ 'x' ], d [ 'y' ] ) for d in LoD ]"}, {"question": "create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it\n", "answers": ["dict ( x [ i : i + 2 ] for i in range ( 0 , len ( x ) , 2 ) ) \n"], "generated": "dict ( ( x, y ) for x, y in zip ( x, x + 1 ) )"}, {"question": "select rows in a dataframe `df` column 'closing_price' between two values 99 and 101\n", "answers": ["df = df [ ( df [ 'closing_price' ] >= 99 ) & ( df [ 'closing_price' ] <= 101 ) ] \n"], "generated": "df. loc [ df [ 'closing_price' ] >= 99. 0 and df [ 'closing_price' ] <= 101. 0 ]"}, {"question": "replace all occurrences of a string `\\n` by string `<br>` in a pandas data frame `df`\n", "answers": ["df . replace ( { '\\n' : '<br>' } , regex = True ) \n"], "generated": "df. str. replace ( '\\n', '<br>' )"}, {"question": "Get a list of pairs from a string `word` using lambda function\n", "answers": ["list ( map ( lambda x , y : x + y , word [ : - 1 ] , word [ 1 : ] ) ) \n"], "generated": "[ ( word [ i ], word [ j ] ) for i, j in range ( len ( word ) ) ]"}, {"question": "extract a url from a string `myString`\n", "answers": ["print ( re . search ( '(?P<url>https?://[^\\\\s]+)' , myString ) . group ( 'url' ) ) \n"], "generated": "myString = 'http://www.google.com/'. replace ( 'http://www.google.com/', '' )"}, {"question": "create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'\n", "answers": ["pd . date_range ( '2016-01-01' , freq = 'WOM-2FRI' , periods = 13 ) \n"], "generated": "DatetimeIndex ( [ 2016, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}, {"question": "replace spaces with underscore\n", "answers": ["mystring . replace ( ' ' , '_' ) \n"], "generated": "re. sub ( '\\\\s+', '_', yourstring )"}, {"question": "split string `my_string` on white spaces\n", "answers": ["\"\"\" \"\"\" . join ( my_string . split ( ) ) \n"], "generated": "re. split ( '\\\\s+', my_string )"}, {"question": "get a list containing the sum of each element `i` in list `l` plus the previous elements\n", "answers": ["[ sum ( l [ : i ] ) for i , _ in enumerate ( l ) ] \n"], "generated": "[ ( x + y ) for x, y in zip ( l, l [ 1 : ] ) ]"}, {"question": "shuffle columns of an numpy array 'r'\n", "answers": ["np . random . shuffle ( np . transpose ( r ) ) \n"], "generated": "np. random. shuffle ( r )"}, {"question": "find a value within nested json 'data' where the key inside another key 'B' is unknown.\n", "answers": ["list ( data [ 'A' ] [ 'B' ] . values ( ) ) [ 0 ] [ 'maindata' ] [ 0 ] [ 'Info' ] \n"], "generated": "{ 'data' : { 'B' : { 'C' : { 'D' : { 'E' : { 'F' : 'G' } } } } } }"}, {"question": "determine number of files on a drive with python\n", "answers": ["os . statvfs ( '/' ) . f_files - os . statvfs ( '/' ) . f_ffree \n"], "generated": "os. listdir ( 'C:\\\\' )"}, {"question": "convert string `user_input` into a list of integers `user_list`\n", "answers": ["user_list = [ int ( number ) for number in user_input . split ( ',' ) ] \n"], "generated": "[ int ( x ) for x in user_input ]"}, {"question": "Sorting a Python list by two criteria\n", "answers": ["sorted ( list , key = lambda x : ( x [ 0 ] , - x [ 1 ] ) ) \n"], "generated": "sorted ( list ( data. items ( ) ), key = lambda x : x [ 1 ] [ 0 ], reverse = True )"}, {"question": "reverse list `ut` based on the `count` attribute of each object\n", "answers": ["ut . sort ( key = lambda x : x . count , reverse = True ) \n"], "generated": "ut. sort ( key = lambda x : x. count, reverse = True )"}, {"question": "click a href button 'Send' with selenium\n", "answers": ["driver . find_element_by_partial_link_text ( 'Send' ) . click ( ) \n"], "generated": "driver. find_element_by_xpath ( 'xpath' ). click ( )"}, {"question": "click a href button with text 'Send InMail' with selenium\n", "answers": ["driver . find_element_by_link_text ( 'Send InMail' ) . click ( ) \n"], "generated": "driver. find_element_by_xpath ( 'xpath' ). click ( )"}, {"question": "Sorting data in DataFrame Pandas\n", "answers": ["df . sort_values ( [ 'System_num' , 'Dis' ] ) \n"], "generated": "df. sort ( [ 'Peak', 'Weeks' ], ascending = [ True, False ], inplace = True )"}, {"question": "sort a list `l` by length of value in tuple\n", "answers": ["l . sort ( key = lambda t : len ( t [ 1 ] ) , reverse = True ) \n"], "generated": "l. sort ( key = lambda x : len ( x [ 1 ] ) )"}, {"question": "return `True` if string `foobarrrr` contains regex `ba[rzd]`\n", "answers": ["bool ( re . search ( 'ba[rzd]' , 'foobarrrr' ) ) \n"], "generated": "if ( 'foobarrrr'. find ( 'ba[rzd]' ) ) : pass"}, {"question": "Removing duplicates in list `source_list`\n", "answers": ["list ( set ( source_list ) ) \n"], "generated": "[ set ( item ) for item in source_list ]"}, {"question": "Convert array `a` into a list\n", "answers": ["numpy . array ( a ) . reshape ( - 1 ) . tolist ( ) \n"], "generated": "[ ( v, k ) for k, v in a. items ( ) ]"}, {"question": "In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`\n", "answers": ["print ( soup . find ( text = 'Address:' ) . findNext ( 'td' ) . contents [ 0 ] ) \n"], "generated": "soup. find_all ( 'td', text = re. compile ( 'Address:') )"}, {"question": "convert each tuple in list `l` to a string with '@' separating the tuples' elements\n", "answers": ["\"\"\" \"\"\" . join ( [ ( '%d@%d' % ( t [ 0 ] , t [ 1 ] ) ) for t in l ] ) \n"], "generated": "[ '@'. join ( x ) for x in l ]"}, {"question": "Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`\n", "answers": ["[ i for i in teststr if re . search ( '\\\\d+[xX]' , i ) ] \n"], "generated": "[ re. findall ( '\\\\d+[xX]', teststr ) for x in range ( len ( teststr ) ) ]"}, {"question": "Sort dictionary `o` in ascending order based on its keys and items\n", "answers": ["sorted ( o . items ( ) ) \n"], "generated": "sorted ( list ( o. items ( ) ), key = lambda k_v : k_v [ 1 ] [ 0 ], reverse = True )"}, {"question": "How to sort dictionaries by keys in Python\n", "answers": ["sorted ( d . items ( ) ) \n"], "generated": "sorted ( list ( dict1. items ( ) ), key = lambda x : x [ 1 ] )"}, {"question": "function to convert strings into integers\n", "answers": ["int ( ) \n"], "generated": "int ( x. strip ( ) )"}, {"question": "call a shell script `./test.sh` using subprocess\n", "answers": ["subprocess . call ( [ './test.sh' ] ) \n"], "generated": "subprocess. call ( [ './test.sh' ], shell = True )"}, {"question": "combine lists `l1` and `l2`  by alternating their elements\n", "answers": ["[ val for pair in zip ( l1 , l2 ) for val in pair ] \n"], "generated": "list ( itertools. zip ( l1, l2 ) )"}, {"question": "encode a string `data to be encoded` to `ascii` encoding\n", "answers": ["encoded = 'data to be encoded' . encode ( 'ascii' ) \n"], "generated": "data. encode ( 'ascii' )"}, {"question": "Get attribute `my_str` of object `my_object`\n", "answers": ["getattr ( my_object , my_str ) \n"], "generated": "getattr ( my_object, my_str )"}, {"question": "How do I sum the first value in each tuple in a list of tuples in Python?\n", "answers": ["sum ( [ pair [ 0 ] for pair in list_of_pairs ] ) \n"], "generated": "sum ( x [ 1 ] for x in list ( a_list ) )"}, {"question": "find all words in a string `mystring` that start with the `$` sign\n", "answers": ["[ word for word in mystring . split ( ) if word . startswith ( '$' ) ] \n"], "generated": "re. findall ( '\\\\w+$', mystring )"}, {"question": "replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros\n", "answers": ["np . where ( np . in1d ( A , [ 1 , 3 , 4 ] ) . reshape ( A . shape ) , A , 0 ) \n"], "generated": "A [ np. all ( np. any ( A - [ 1, 3, 4 ], axis = 2 ), axis = 0 ) ]"}, {"question": "running r script '/pathto/MyrScript.r' from python\n", "answers": ["subprocess . call ( [ '/usr/bin/Rscript' , '--vanilla' , '/pathto/MyrScript.r' ] ) \n"], "generated": "os. system ( 'r /pathto/MyrScript.r' )"}, {"question": "add a header to a csv file\n", "answers": ["writer . writeheader ( ) \n"], "generated": "writer. writeheader ( )"}, {"question": "Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'\n", "answers": ["time . strftime ( '%Y-%m-%d %H:%M:%S' , time . localtime ( 1347517370 ) ) \n"], "generated": "datetime. datetime. strptime ( '1347517370', '%Y-%m-%d %H:%M:%S' )"}, {"question": "selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1\n", "answers": ["a [ np . where ( ( a [ : , ( 0 ) ] == 0 ) * ( a [ : , ( 1 ) ] == 1 ) ) ] \n"], "generated": "a [ ( 0, 1 ), ( 1, 0 ) ]"}, {"question": "length of longest element in list `words`\n", "answers": ["len ( max ( words , key = len ) ) \n"], "generated": "len ( max ( words, key = len ) )"}, {"question": "Retrieve each line from a file 'File.txt' as a list\n", "answers": ["[ line . split ( ) for line in open ( 'File.txt' ) ] \n"], "generated": "with open ( 'File.txt', 'r' ) as f : for line in f : pass"}, {"question": "Open a file `path/to/FILE_NAME.ext` in write mode\n", "answers": ["new_file = open ( 'path/to/FILE_NAME.ext' , 'w' ) \n"], "generated": "open ( 'path/to/FILE_NAME.ext', 'w' )"}, {"question": "Check if any key in the dictionary `dict1` starts with the string `EMP$$`\n", "answers": ["any ( key . startswith ( 'EMP$$' ) for key in dict1 ) \n"], "generated": "if ( 'EMP$$' in dict1 ) : pass"}, {"question": "convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`\n", "answers": ["pd . DataFrame ( { 'email' : sf . index , 'list' : sf . values } ) \n"], "generated": "df. set_index ( [ 'email', 'list' ] )"}, {"question": "print unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with utf-8\n", "answers": ["print ( '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' . encode ( 'raw_unicode_escape' ) ) \n"], "generated": "print ( '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'. encode ( 'utf8' ) )"}, {"question": "resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`\n", "answers": ["image = image . resize ( ( x , y ) , Image . ANTIALIAS ) \n"], "generated": "image. resize ( ( x, y ), ( w, h ), filter = 'ANTIALIAS' )"}, {"question": "display the float `1/3*100` as a percentage\n", "answers": ["print ( '{0:.0f}%' . format ( 1.0 / 3 * 100 ) ) \n"], "generated": "print ( '1/3*100' )"}, {"question": "sort a list `l` of dicts by dict value 'title'\n", "answers": ["l . sort ( key = lambda x : x [ 'title' ] ) \n"], "generated": "l. sort ( key = lambda x : x [ 1 ] [ 'title' ] )"}, {"question": "find 10 largest differences between each respective elements of list `l1` and list `l2`\n", "answers": ["heapq . nlargest ( 10 , range ( len ( l1 ) ) , key = lambda i : abs ( l1 [ i ] - l2 [ i ] ) ) \n"], "generated": "[ ( x - y ) for x, y in zip ( l1, l2 ) ]"}, {"question": "write records in dataframe `df` to table 'test' in schema 'a_schema'\n", "answers": ["df . to_sql ( 'test' , engine , schema = 'a_schema' ) \n"], "generated": "df. to_frame ( 'test', schema = 'a_schema' )"}, {"question": "remove duplicate elements from list 'L'\n", "answers": ["list ( dict ( ( x [ 0 ] , x ) for x in L ) . values ( ) ) \n"], "generated": "[ x for x in list ( L ) if x not in L ]"}, {"question": "get the position of item 1 in `testlist`\n", "answers": ["[ i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ] \n"], "generated": "testlist [ 1 ]. index ( )"}, {"question": "get the position of item 1 in `testlist`\n", "answers": ["for i in [ i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ] : pass \n"], "generated": "testlist [ 1 ]. index ( )"}, {"question": "get the position of item 1 in `testlist`\n", "answers": ["gen = ( i for ( i , x ) in enumerate ( testlist ) if ( x == 1 ) ) for i in gen : pass \n"], "generated": "testlist [ 1 ]. index ( )"}, {"question": "get the position of item `element` in list `testlist`\n", "answers": ["try : print ( testlist . index ( element ) ) except ValueError : pass \n"], "generated": "testlist [ element ]. index ( )"}, {"question": "get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`\n", "answers": ["max ( lis , key = itemgetter ( 1 ) ) [ 0 ] \n"], "generated": "[ x [ 0 ] for x in lis ]"}, {"question": "convert list of tuples `L` to a string\n", "answers": ["\"\"\", \"\"\" . join ( '(' + ', ' . join ( i ) + ')' for i in L ) \n"], "generated": "[ str ( x ) for x in L ]"}, {"question": "Sort lis `list5` in ascending order based on the degrees value of its elements\n", "answers": ["sorted ( list5 , lambda x : ( degree ( x ) , x ) ) \n"], "generated": "sorted ( list ( list5. items ( ) ), key = lambda x : x [ 1 ] [ 0 ] )"}, {"question": "convert a list  into a generator object\n", "answers": ["( n for n in [ 1 , 2 , 3 , 5 ] ) \n"], "generated": "it = list ( range ( 10 ) )"}, {"question": "Open a file `yourfile.txt` in write mode\n", "answers": ["f = open ( 'yourfile.txt' , 'w' ) \n"], "generated": "open ( 'yourfile.txt', 'w' ). write ( 'Hello World' )"}, {"question": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple\n", "answers": ["from functools import reduce reduce ( lambda a , b : a + b , ( ( 'aa' , ) , ( 'bb' , ) , ( 'cc' , ) ) ) \n"], "generated": "tuple ( tuple ( 'aa', 'bb', 'cc' ) )"}, {"question": "Python Pandas: How to replace a characters in a column of a dataframe?\n", "answers": ["df [ 'range' ] . replace ( ',' , '-' , inplace = True ) \n"], "generated": "df. replace ( [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z' ], 'x', regex = True )"}, {"question": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`\n", "answers": ["zip ( * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) ] ) \n"], "generated": "unzip ( [ ( 'a', 1 ), ( 'b', 2 ), ( 'c', 3 ), ( 'd', 4 ) ] )"}, {"question": "unzip list `original` and return a generator\n", "answers": ["result = ( ( a for ( a , b ) in original ) , ( b for ( a , b ) in original ) ) \n"], "generated": "itertools. zip_longest ( original, repeat = len ( original ) )"}, {"question": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None\n", "answers": ["map ( None , * [ ( 'a' , 1 ) , ( 'b' , 2 ) , ( 'c' , 3 ) , ( 'd' , 4 ) , ( 'e' , ) ] ) \n"], "generated": "[ ( 'a', 1 ), ( 'b', 2 ), ( 'c', 3 ), ( 'd', 4 ), ( 'e', ) ]"}, {"question": "Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\"\n", "answers": ["d [ 'mynewkey' ] = 'mynewvalue' \n"], "generated": "d. update ( {'mynewkey' :'mynewvalue' } )"}, {"question": "Add key 'a' to dictionary `data` with value 1\n", "answers": ["data . update ( dict ( a = 1 ) ) \n"], "generated": "data. update ( { 'a' : 1 } )"}, {"question": "find maximal value in matrix `matrix`\n", "answers": ["max ( [ max ( i ) for i in matrix ] ) \n"], "generated": "np. max ( matrix )"}, {"question": "extract ip address from an html string\n", "answers": ["ip = re . findall ( '[0-9]+(?:\\\\.[0-9]+){3}' , s ) \n"], "generated": "html = '<html><body>' + html + '</body></html>'"}, {"question": "append each line in file `myfile` into a list\n", "answers": ["[ x for x in myfile . splitlines ( ) if x != '' ] \n"], "generated": "with open ('myfile', 'a' ) as f : f. write ( '\\n'. join ( '%s' % line ) )"}, {"question": "add color bar with image `mappable` to plot `plt`\n", "answers": ["plt . colorbar ( mappable = mappable , cax = ax3 ) \n"], "generated": "plt. colorbar ( mappable, ax = ax )"}, {"question": "Python split a string using regex\n", "answers": ["re . findall ( '(.+?):(.+?)\\\\b ?' , text ) \n"], "generated": "re. split ( '\\\\s+', s )"}, {"question": "get a value of datetime.today() in the UTC time zone\n", "answers": ["datetime . now ( pytz . utc ) \n"], "generated": "datetime. datetime. now ( ). utcnow ( ). date ( )"}, {"question": "Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`\n", "answers": ["list2 = [ x for x in list1 if x ] \n"], "generated": "list2 = [ [ x [ : ] for x in list1 ] for i in range ( len ( list1 ) - 1 ) ]"}, {"question": "get all text that is not enclosed within square brackets in string `example_str`\n", "answers": ["re . findall ( '(.*?)\\\\[.*?\\\\]' , example_str ) \n"], "generated": "re. sub ( '\\\\[.*?\\\\]', '', example_str )"}, {"question": "get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'\n", "answers": ["re . findall ( '\\\\(.+?\\\\)|\\\\w' , '(zyx)bc' ) \n"], "generated": "re. findall ( '(?<=\\()(?=\\))', '(zyx)bc' )"}, {"question": "match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`\n", "answers": ["re . findall ( '\\\\(.*?\\\\)|\\\\w' , '(zyx)bc' ) \n"], "generated": "re. compile ( '\\\\w+(?:-\\\\w+)+', 'zyx', re. MULTILINE )"}, {"question": "Open a background process 'background-process' with arguments 'arguments'\n", "answers": ["subprocess . Popen ( [ 'background-process' , 'arguments' ] ) \n"], "generated": "subprocess. call ( 'background-process', shell = True, stdin = subprocess. PIPE, stdout = subprocess. PIPE, stderr = subprocess. PIPE )"}, {"question": "convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary\n", "answers": ["dict ( [ ( 'Name' , 'Joe' ) , ( 'Age' , 22 ) ] ) \n"], "generated": "dict ( [ ( 'Name', 'Joe' ), ( 'Age', 22 ) ] )"}, {"question": "double backslash escape all double quotes in string `s`\n", "answers": ["print ( s . encode ( 'unicode-escape' ) . replace ( '\"' , '\\\\\"' ) ) \n"], "generated": "re. sub ( '\\\\\\\"\\\\\\\"', '\\\\\"\\\\\"', s )"}, {"question": "plotting stacked barplots on a panda data frame\n", "answers": ["df . plot ( kind = 'barh' , stacked = True ) \n"], "generated": "df. groupby ( [ 'Peak', 'Weeks' ] ). size ( ). plot ( kind = 'bar' )"}, {"question": "finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.\n", "answers": ["[ i for i , j in enumerate ( myList ) if 'how' in j . lower ( ) or 'what' in j . lower ( ) ] \n"], "generated": "[ myList [ : - 1 ] for myList in myList. split ( 'how', 'what' ) ]"}, {"question": "check if object `o` is a string\n", "answers": ["isinstance ( o , str ) \n"], "generated": "isinstance ( o, str )"}, {"question": "check if object `o` is a string\n", "answers": ["isinstance ( o , str ) \n"], "generated": "isinstance ( o, str )"}, {"question": "append list `list1` to `list2`\n", "answers": ["list2 . extend ( list1 ) \n"], "generated": "list2. append ( list1 )"}, {"question": "append list `a` to `c`\n", "answers": ["c . extend ( a ) \n"], "generated": "c = [ a ]"}, {"question": "append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`\n", "answers": ["b . append ( ( a [ 0 ] [ 0 ] , a [ 0 ] [ 2 ] ) ) \n"], "generated": "b = [ a [ x ] for x in range ( 0, len ( a ), 2 ) ]"}, {"question": "unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'\n", "answers": ["pd . DataFrame ( out . tolist ( ) , columns = [ 'out-1' , 'out-2' ] , index = out . index ) \n"], "generated": "df. set_index ( [ 'out-1', 'out-2' ], inplace = True )"}, {"question": "rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable\n", "answers": ["ax . set_xticklabels ( labels , rotation = 45 ) \n"], "generated": "ax. set_xticklabels ( ax. xaxis. get_majorticklabels ( ), rotation = 45 )"}, {"question": "Get the current directory of a script\n", "answers": ["os . path . basename ( os . path . dirname ( os . path . realpath ( __file__ ) ) ) \n"], "generated": "os. path. dirname ( os. path. abspath ( __file__ ) )"}, {"question": "split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'\n", "answers": ["re . split ( '[ ](?=[A-Z]+\\\\b)' , input ) \n"], "generated": "re. split ( '\\\\s*\\\\[\\\\]\\\\s*', input )"}, {"question": "send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`\n", "answers": ["r = requests . post ( url , files = files , headers = headers , data = data ) \n"], "generated": "r = requests. post ( url, files = files, headers = headers, metadata = data )"}, {"question": "get a list from a list `lst` with values mapped into a dictionary `dct`\n", "answers": ["[ dct [ k ] for k in lst ] \n"], "generated": "[ ( k, v ) for k, v in lst for dct in lst ]"}, {"question": "truncate float 1.923328437452 to 3 decimal places\n", "answers": ["round ( 1.923328437452 , 3 ) \n"], "generated": "float ( '{0:.3f}'. format ( 1.923328437452 ) )"}, {"question": "place the radial ticks in plot `ax` at 135 degrees\n", "answers": ["ax . set_rlabel_position ( 135 ) \n"], "generated": "ax. set_yticks ( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] )"}, {"question": "get number of keys in dictionary `yourdict`\n", "answers": ["len ( list ( yourdict . keys ( ) ) ) \n"], "generated": "len ( yourdict. keys ( ) )"}, {"question": "pandas dataframe get first row of each group by 'id'\n", "answers": ["df . groupby ( 'id' ) . first ( ) \n"], "generated": "df. groupby ( 'id' ). head ( 1 )"}, {"question": "extract attributes 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`\n", "answers": ["re . findall ( 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' , data ) \n"], "generated": "data = data. replace ('src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"','src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' )"}, {"question": "Call a subprocess with arguments `c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat` that may contain spaces\n", "answers": ["subprocess . Popen ( [ 'c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat' ] ) \n"], "generated": "subprocess. call ( [ 'c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat', '-c', '-s', '-n', '-p', '-t', '-d', '-f', '-r', '-v', '-h', '-l', '-a', '-t', '-d', '-f', '-r', '-v', '-h', '-l', '-a', '-t', '-d', '-f', '-r', '-v', '-h', '-l', '-a', '-t', '-d', '-f', '-r', '-v', '-h', '-l', '-a', '-t', '-d', '-f', '-r', '-v', '-h', '-l', '-a', '-t', '-d', '-f', '-r', '-v', '-h', '-l', '-a', '-t', '-d', '-f', '-r', '-v', '-h', '-l',"}, {"question": "make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`\n", "answers": ["df [ 'group' ] . plot ( kind = 'bar' , color = [ 'r' , 'g' , 'b' , 'r' , 'g' , 'b' , 'r' ] ) \n"], "generated": "df. groupby ( [ 'group' ] ). mean ( ). plot ( kind = 'bar' )"}, {"question": "Get the length of list `my_list`\n", "answers": ["len ( my_list ) \n"], "generated": "len ( my_list )"}, {"question": "Getting the length of array `s`\n", "answers": ["len ( s ) \n"], "generated": "len ( s )"}, {"question": "Getting the length of `my_string`\n", "answers": ["len ( my_string ) \n"], "generated": "len ( my_string )"}, {"question": "replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.\n", "answers": ["\"\"\"obama\"\"\" . replace ( 'a' , '%temp%' ) . replace ( 'b' , 'a' ) . replace ( '%temp%' , 'b' ) \n"], "generated": "'obama'. replace ( 'a', 'b', 1 )"}, {"question": "create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`\n", "answers": ["data [ 'weekday' ] = data [ 'my_dt' ] . apply ( lambda x : x . weekday ( ) ) \n"], "generated": "df [ 'weekday' ] = df ['my_dt' ]. dt. weekday"}, {"question": "reverse sort counter `x` by value\n", "answers": ["sorted ( list ( x . items ( ) ) , key = lambda pair : pair [ 1 ] , reverse = True ) \n"], "generated": "sorted ( list ( x. items ( ) ), key = lambda x : x [ 1 ] [ 1 ] )"}, {"question": "numpy concatenate two arrays `a` and `b` along the first axis\n", "answers": ["print ( concatenate ( ( a , b ) , axis = 0 ) ) \n"], "generated": "numpy. concatenate ( a, b )"}, {"question": "numpy concatenate two arrays `a` and `b` along the first axis\n", "answers": ["c = np . r_ [ ( a [ None , : ] , b [ None , : ] ) ] \n"], "generated": "numpy. concatenate ( a, b )"}, {"question": "fetch address information for host 'google.com' ion port 80\n", "answers": ["print ( socket . getaddrinfo ( 'google.com' , 80 ) ) \n"], "generated": "requests. get ( 'http://www.google.com/', verify = False )"}, {"question": "return a 401 unauthorized in django\n", "answers": ["return HttpResponse ( 'Unauthorized' , status = 401 ) \n"], "generated": "return HttpResponse ( status = 401 )"}, {"question": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?\n", "answers": ["session . execute ( 'INSERT INTO t1 (SELECT * FROM t2)' ) \n"], "generated": "cursor. execute ( 'INSERT INTO table (`column1`) VALUES (%s)', ( value, ) )"}, {"question": "Sorting a list of lists in Python\n", "answers": ["c2 . sort ( key = lambda row : ( row [ 2 ] , row [ 1 ] , row [ 0 ] ) ) \n"], "generated": "sorted ( list ( listone ), key = lambda x : x [ 1 ] )"}, {"question": "set font `Arial` to display non-ascii characters in matplotlib\n", "answers": ["matplotlib . rc ( 'font' , ** { 'sans-serif' : 'Arial' , 'family' : 'sans-serif' } ) \n"], "generated": "plt. rcParams. update ( { 'font.family' : 'Arial' } )"}, {"question": "get html source of Selenium WebElement `element`\n", "answers": ["element . get_attribute ( 'innerHTML' ) \n"], "generated": "element. source"}, {"question": "open a 'gnome' terminal from python script and run  'sudo apt-get update' command.\n", "answers": ["os . system ( 'gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'' ) \n"], "generated": "os. system ('sudo apt-get update' )"}, {"question": "declare an array\n", "answers": ["my_list = [ ] \n"], "generated": "variable = [ ]"}, {"question": "add an entry 'wuggah' at the beginning of list `myList`\n", "answers": ["myList . insert ( 0 , 'wuggah' ) \n"], "generated": "myList. insert ( 0, 'wuggah' )"}, {"question": "select the last column of dataframe `df`\n", "answers": ["df [ df . columns [ - 1 ] ] \n"], "generated": "df. columns"}, {"question": "converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix\n", "answers": ["np . column_stack ( ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) ) \n"], "generated": "np. array ( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] ). reshape ( ( 1, 2 ) )"}, {"question": "determine the type of variable `v`\n", "answers": ["type ( v ) \n"], "generated": "type ( v )"}, {"question": "determine the type of variable `v`\n", "answers": ["type ( v ) \n"], "generated": "type ( v )"}, {"question": "get the type of variable `variable_name`\n", "answers": ["print ( type ( variable_name ) ) \n"], "generated": "type ( variable_name )"}, {"question": "Print a string `word` with string format\n", "answers": ["print ( '\"{}\"' . format ( word ) ) \n"], "generated": "print ( 'Word is: {0}'. format ( word ) )"}, {"question": "create list `y` containing two empty lists\n", "answers": ["y = [ [ ] for n in range ( 2 ) ] \n"], "generated": "y = [ [ ] for i in range ( 2 ) ]"}, {"question": "delete all occurrences of character 'i' in string 'it is icy'\n", "answers": ["\"\"\"\"\"\" . join ( [ char for char in 'it is icy' if char != 'i' ] ) \n"], "generated": "re. sub ( '\\\\i', 'i', 'it is icy' )"}, {"question": "delete all characters \"i\" in string \"it is icy\"\n", "answers": ["\"\"\"it is icy\"\"\" . replace ( 'i' , '' ) \n"], "generated": "re. sub ( '\\\\i', '', 'it is icy' )"}, {"question": "Drop rows of pandas dataframe `df` having NaN in column at index \"1\"\n", "answers": ["df . dropna ( subset = [ 1 ] ) \n"], "generated": "df. dropna ( axis = 1, how = 'all' )"}, {"question": "converting list of strings `intstringlist` to list of integer `nums`\n", "answers": ["nums = [ int ( x ) for x in intstringlist ] \n"], "generated": "[ map ( int, intstringlist ) for nums in itertools. chain ( map ( int, intstringlist ) ) ]"}, {"question": "print \".\" without newline\n", "answers": ["sys . stdout . write ( '.' ) \n"], "generated": "print ( \".\" )"}, {"question": "Find all files in directory \"/mydir\" with extension \".txt\"\n", "answers": ["os . chdir ( '/mydir' ) for file in glob . glob ( '*.txt' ) : pass \n"], "generated": "for ( dirname, dirnames, filenames ) in os. walk ( '/mydir' ) : for filename in filenames : print ( os. path. join ( dirname, filename ) )"}, {"question": "Find all files in directory \"/mydir\" with extension \".txt\"\n", "answers": ["for ( root , dirs , files ) in os . walk ( '/mydir' ) : for file in files : if file . endswith ( '.txt' ) : pass \n"], "generated": "for ( dirname, dirnames, filenames ) in os. walk ( '/mydir' ) : for filename in filenames : print ( os. path. join ( dirname, filename ) )"}, {"question": "loop through the IP address range \"192.168.x.x\"\n", "answers": ["for i in range ( 256 ) : for j in range ( 256 ) : ip = ( '192.168.%d.%d' % ( i , j ) ) print ( ip ) \n"], "generated": "for ip in range ( 192, 255 ) : pass"}, {"question": "loop through the IP address range \"192.168.x.x\"\n", "answers": ["generator = iter_iprange ( '192.168.1.1' , '192.168.255.255' , step = 1 ) \n"], "generated": "for ip in range ( 192, 255 ) : pass"}, {"question": "write multiple strings `line1`, `line2` and `line3` in one line in a file `target`\n", "answers": ["target . write ( '%r\\n%r\\n%r\\n' % ( line1 , line2 , line3 ) ) \n"], "generated": "target. write ( 'line1\\nline2\\nline3' )"}, {"question": "Print new line character as `\\n` in a string `foo\\nbar`\n", "answers": ["print ( 'foo\\nbar' . encode ( 'string_escape' ) ) \n"], "generated": "print ( 'foo\\nbar'. replace ( '\\n', '\\n' ) )"}, {"question": "calculate the mean of each element in array `x` with the element previous to it\n", "answers": ["( x [ 1 : ] + x [ : - 1 ] ) / 2 \n"], "generated": "np. mean ( x, axis = 0 )"}, {"question": "load data containing `utf-8` from file `new.txt` into numpy array `arr`\n", "answers": ["arr = numpy . fromiter ( codecs . open ( 'new.txt' , encoding = 'utf-8' ) , dtype = '<U2' ) \n"], "generated": "arr = numpy. loadtxt ( open ( 'new.txt', 'rb' ), delimiter = ',' )"}, {"question": "Sort a list of dictionary `l` based on key `time` in descending order\n", "answers": ["l = sorted ( l , key = lambda a : a [ 'time' ] , reverse = True ) \n"], "generated": "sorted ( list ( l. items ( ) ), key = lambda tup : tup [ 1 ] [ 'time' ], reverse = True )"}, {"question": "find the string in `your_string` between two special characters \"[\" and \"]\"\n", "answers": ["re . search ( '\\\\[(.*)\\\\]' , your_string ) . group ( 1 ) \n"], "generated": "re. findall ( '\\\\[([^]]+)]', your_string )"}, {"question": "count number of times string 'brown' occurred in string 'The big brown fox is brown'\n", "answers": ["\"\"\"The big brown fox is brown\"\"\" . count ( 'brown' ) \n"], "generated": "'The big brown fox is brown'. count ( )"}, {"question": "download the file from url `url` and save it under file `file_name`\n", "answers": ["urllib . request . urlretrieve ( url , file_name ) \n"], "generated": "download_url = 'http://example.com/file.ext' + file_name"}, {"question": "split string `text` by \",\"\n", "answers": ["text . split ( ',' ) \n"], "generated": "re. split ( ',', text )"}, {"question": "replace dot characters  '.' associated with ascii letters in list `s` with space ' '\n", "answers": ["[ re . sub ( '(?<!\\\\d)\\\\.(?!\\\\d)' , ' ' , i ) for i in s ] \n"], "generated": "re. sub ( '\\\\.\\\\w+','', s )"}, {"question": "call multiple bash function \u2018vasp' and \u2018tee tee_output' using \u2018|'\n", "answers": ["subprocess . check_call ( 'vasp | tee tee_output' , shell = True ) \n"], "generated": "subprocess. call ( 'vasp', 'tee_output', shell = True )"}, {"question": "get all the elements except strings from the list 'lst'.\n", "answers": ["[ element for element in lst if not isinstance ( element , str ) ] \n"], "generated": "[ x for x in lst if not x. startswith ('string' ) ]"}, {"question": "sort a list of dictionaries `l` by values in key `name` in descending order\n", "answers": ["newlist = sorted ( l , key = itemgetter ( 'name' ) , reverse = True ) \n"], "generated": "l. sort ( key = lambda x : x [ 1 ] [ 'name' ] )"}, {"question": "How do I sort a list of dictionaries by values of the dictionary in Python?\n", "answers": ["list_of_dicts . sort ( key = operator . itemgetter ( 'age' ) ) \n"], "generated": "sorted ( list ( d. items ( ) ), key = lambda x : x [ 1 ] )"}, {"question": "join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`\n", "answers": ["\"\"\",\"\"\" . join ( trans [ 'category' ] ) \n"], "generated": "[ ( k, v ) for k, v in trans. items ( ) for category in category_list ]"}, {"question": "get json data from restful service 'url'\n", "answers": ["json . load ( urllib . request . urlopen ( 'url' ) ) \n"], "generated": "json_data = json. loads ( response. json )"}, {"question": "django filter by hour\n", "answers": ["Entry . objects . filter ( pub_date__contains = '08:00' ) \n"], "generated": "time = datetime. datetime. now ( ). time ( )"}, {"question": "convert datetime object `(1970, 1, 1)` to seconds\n", "answers": ["( t - datetime . datetime ( 1970 , 1 , 1 ) ) . total_seconds ( ) \n"], "generated": "datetime. datetime. now ( ). strftime ( '%H:%M:%S' )"}, {"question": "reload a module `module`\n", "answers": ["import imp imp . reload ( module ) \n"], "generated": "importlib. import_module ('module' )"}, {"question": "convert int values in list `numlist` to float\n", "answers": ["numlist = [ float ( x ) for x in numlist ] \n"], "generated": "[ float ( x ) for x in numlist ]"}, {"question": "convert a urllib unquoted string `unescaped` to a json data `json_data`\n", "answers": ["json_data = json . loads ( unescaped ) \n"], "generated": "json_data = json. loads ( unescaped )"}, {"question": "write `newFileBytes` to a binary file `newFile`\n", "answers": ["newFile . write ( struct . pack ( '5B' , * newFileBytes ) ) \n"], "generated": "newFileBytes = open ( 'newFile', 'wb' ). write ( newFile )"}, {"question": "get the last key of dictionary `dict`\n", "answers": ["list ( dict . keys ( ) ) [ - 1 ] \n"], "generated": "dict. pop ( )"}, {"question": "write line \"hi there\" to file `myfile`\n", "answers": ["f = open ( 'myfile' , 'w' ) f . write ( 'hi there\\n' ) f . close ( ) \n"], "generated": "with open ('myfile', 'w' ) as f : f. write ( 'hi there' )"}, {"question": "convert unicode string `s` to ascii\n", "answers": ["s . encode ( 'iso-8859-15' ) \n"], "generated": "s. encode ( 'ascii' )"}, {"question": "Find all numbers and dots from a string `text` using regex\n", "answers": ["re . findall ( 'Test([0-9.]*[0-9]+)' , text ) \n"], "generated": "re. findall ( '\\\\d+\\\\.\\\\d+', text )"}, {"question": "execute script 'script.ps1' using 'powershell.exe' shell\n", "answers": ["os . system ( 'powershell.exe' , 'script.ps1' ) \n"], "generated": "os. system ( 'powershell.exe script.ps1' )"}, {"question": "get a list of all keys in Cassandra database `cf` with pycassa\n", "answers": ["list ( cf . get_range ( ) . get_keys ( ) ) \n"], "generated": "cf. keys ( )"}, {"question": "get the index of an integer `1` from a list `lst` if the list also contains boolean items\n", "answers": ["next ( i for i , x in enumerate ( lst ) if not isinstance ( x , bool ) and x == 1 ) \n"], "generated": "[ x [ 1 ] for x in lst if x [ 0 ] == 1 ]"}, {"question": "choose a random file from the directory contents of the C drive, `C:\\\\`\n", "answers": ["random . choice ( os . listdir ( 'C:\\\\' ) ) \n"], "generated": "os. system ( 'dir C:\\\\' )"}, {"question": "Get all urls within text `s`\n", "answers": ["re . findall ( '\"(http.*?)\"' , s , re . MULTILINE | re . DOTALL ) \n"], "generated": "s = 'http://www.stackoverflow.com/questions/ask'"}, {"question": "split a string `mystring` considering the spaces ' '\n", "answers": ["mystring . replace ( ' ' , '! !' ) . split ( '!' ) \n"], "generated": "re. split ( '\\\\s+', mystring )"}, {"question": "sum elements at the same index in list `data`\n", "answers": ["[ [ sum ( item ) for item in zip ( * items ) ] for items in zip ( * data ) ] \n"], "generated": "sum ( x for x in list ( data. items ( ) ) if x > 0 )"}]